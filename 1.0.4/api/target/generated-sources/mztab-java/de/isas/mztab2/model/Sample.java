/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * Specification of sample.
(empty) name: A name for each sample to serve as a list of the samples that MUST be reported in the following tables. Samples MUST be reported if a statistical design is being captured (i.e. bio or tech replicates). If the type of replicates are not known, samples SHOULD NOT be reported. 
species: The respective species of the samples analysed. For more complex cases, such as metagenomics, optional columns and userParams should be used. 
tissue: The respective tissue(s) of the sample. 
cell_type: The respective cell type(s) of the sample. 
disease: The respective disease(s) of the sample. 
description: A human readable description of the sample. 
custom: Custom parameters describing the sample's additional properties. Dates MUST be provided in ISO-8601 format.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>COM	Experiment where all samples consisted of the same two species
MTD	sample[1]	individual number 1
MTD	sample[1]-species[1]	[NCBITaxon, NCBITaxon:9606, Homo sapiens, ]
MTD	sample[1]-tissue[1]	[BTO, BTO:0000759, liver, ]
MTD	sample[1]-cell_type[1]	[CL, CL:0000182, hepatocyte, ]
MTD	sample[1]-disease[1]	[DOID, DOID:684, hepatocellular carcinoma, ]
MTD	sample[1]-disease[2]	[DOID, DOID:9451, alcoholic fatty liver, ]
MTD	sample[1]-description	Hepatocellular carcinoma samples.
MTD	sample[1]-custom[1]	[,,Extraction date, 2011-12-21]
MTD	sample[1]-custom[2]	[,,Extraction reason, liver biopsy]
MTD	sample[2]	individual number 2
MTD	sample[2]-species[1]	[NCBITaxon, NCBITaxon:9606, Homo sapiens, ]
MTD	sample[2]-tissue[1]	[BTO, BTO:0000759, liver, ]
MTD	sample[2]-cell_type[1]	[CL, CL:0000182, hepatocyte, ]
MTD	sample[2]-description	Healthy control samples.
</code></pre>
 * 
 *
 */
@ApiModel(description = "Specification of sample. (empty) name: A name for each sample to serve as a list of the samples that MUST be reported in the following tables. Samples MUST be reported if a statistical design is being captured (i.e. bio or tech replicates). If the type of replicates are not known, samples SHOULD NOT be reported.  species: The respective species of the samples analysed. For more complex cases, such as metagenomics, optional columns and userParams should be used.  tissue: The respective tissue(s) of the sample.  cell_type: The respective cell type(s) of the sample.  disease: The respective disease(s) of the sample.  description: A human readable description of the sample.  custom: Custom parameters describing the sample's additional properties. Dates MUST be provided in ISO-8601 format. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Sample")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Sample")
public class Sample extends IndexedElement {

  /**
   * Property enumeration for Sample.
   */
  public static enum Properties {
      name("name"), 
      custom("custom"), 
      species("species"), 
      tissue("tissue"), 
      cellType("cell_type"), 
      disease("disease"), 
      description("description");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private String name = null;
  @JsonProperty("custom")
  // Is a container wrapped=false
  // items.name=custom items.baseName=custom items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "custom")
  private List<Parameter> custom = null;
  @JsonProperty("species")
  // Is a container wrapped=false
  // items.name=species items.baseName=species items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "species")
  private List<Parameter> species = null;
  @JsonProperty("tissue")
  // Is a container wrapped=false
  // items.name=tissue items.baseName=tissue items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "tissue")
  private List<Parameter> tissue = null;
  @JsonProperty("cell_type")
  // Is a container wrapped=false
  // items.name=cellType items.baseName=cellType items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "cellType")
  private List<Parameter> cellType = null;
  @JsonProperty("disease")
  // Is a container wrapped=false
  // items.name=disease items.baseName=disease items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "disease")
  private List<Parameter> disease = null;
  @JsonProperty("description")
  @JacksonXmlProperty(localName = "description")
  @XmlElement(name = "description")
  private String description = null;
  
  @Override
  public Sample id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Sample elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for name.
   *
   * @see Sample#setName Sample#setName for specification examples
   * @see Sample#getName Sample#getName for validation constraints
   * @param name a {@code String} parameter.
   * @return Sample
  **/
  public Sample name(String name) {
   this.name = name;
   return this;
  }

   /**
   * The sample&#39;s name.
   *
   * @return name
  **/
  @ApiModelProperty(value = "The sample's name.")
  public String getName() {
    return name;
  }

 /**
   * Set name.
   *
   * 
   * 
   * @see #getName Sample#getName for validation constraints
   * @param name a {@code String} parameter.
  **/
  public void setName(String name) {
    this.name = name;
  }


 /**
   * Builder method for custom.
   *
   * @see Sample#setCustom Sample#setCustom for specification examples
   * @see Sample#getCustom Sample#getCustom for validation constraints
   * @param custom a {@code List<Parameter>} parameter.
   * @return Sample
  **/
  public Sample custom(List<Parameter> custom) {
   this.custom = custom;
   return this;
  }

  /**
   * Add a single customItem to the custom collection.
   *
   * @see Sample#getCustom Sample#getCustom for validation constraints
   * @param customItem a {@code Parameter} parameter.
   * @return Sample
   */
  public Sample addCustomItem(Parameter customItem) {
    if (this.custom == null) {
      this.custom = new ArrayList<>();
    }
    this.custom.add(customItem);
    return this;
  }

   /**
   * Additional user or cv parameters.
   *
   * @return custom
  **/
  @Valid
  @ApiModelProperty(value = "Additional user or cv parameters.")
  public List<Parameter> getCustom() {
    return custom;
  }

 /**
   * Set custom.
   *
   * 
   * 
   * @see #getCustom Sample#getCustom for validation constraints
   * @param custom a {@code List<Parameter>} parameter.
  **/
  public void setCustom(List<Parameter> custom) {
    this.custom = custom;
  }


 /**
   * Builder method for species.
   *
   * @see Sample#setSpecies Sample#setSpecies for specification examples
   * @see Sample#getSpecies Sample#getSpecies for validation constraints
   * @param species a {@code List<Parameter>} parameter.
   * @return Sample
  **/
  public Sample species(List<Parameter> species) {
   this.species = species;
   return this;
  }

  /**
   * Add a single speciesItem to the species collection.
   *
   * @see Sample#getSpecies Sample#getSpecies for validation constraints
   * @param speciesItem a {@code Parameter} parameter.
   * @return Sample
   */
  public Sample addSpeciesItem(Parameter speciesItem) {
    if (this.species == null) {
      this.species = new ArrayList<>();
    }
    this.species.add(speciesItem);
    return this;
  }

   /**
   * Biological species information on the sample.
   *
   * @return species
  **/
  @Valid
  @ApiModelProperty(value = "Biological species information on the sample.")
  public List<Parameter> getSpecies() {
    return species;
  }

 /**
   * Set species.
   *
   * 
   * 
   * @see #getSpecies Sample#getSpecies for validation constraints
   * @param species a {@code List<Parameter>} parameter.
  **/
  public void setSpecies(List<Parameter> species) {
    this.species = species;
  }


 /**
   * Builder method for tissue.
   *
   * @see Sample#setTissue Sample#setTissue for specification examples
   * @see Sample#getTissue Sample#getTissue for validation constraints
   * @param tissue a {@code List<Parameter>} parameter.
   * @return Sample
  **/
  public Sample tissue(List<Parameter> tissue) {
   this.tissue = tissue;
   return this;
  }

  /**
   * Add a single tissueItem to the tissue collection.
   *
   * @see Sample#getTissue Sample#getTissue for validation constraints
   * @param tissueItem a {@code Parameter} parameter.
   * @return Sample
   */
  public Sample addTissueItem(Parameter tissueItem) {
    if (this.tissue == null) {
      this.tissue = new ArrayList<>();
    }
    this.tissue.add(tissueItem);
    return this;
  }

   /**
   * Biological tissue information on the sample.
   *
   * @return tissue
  **/
  @Valid
  @ApiModelProperty(value = "Biological tissue information on the sample.")
  public List<Parameter> getTissue() {
    return tissue;
  }

 /**
   * Set tissue.
   *
   * 
   * 
   * @see #getTissue Sample#getTissue for validation constraints
   * @param tissue a {@code List<Parameter>} parameter.
  **/
  public void setTissue(List<Parameter> tissue) {
    this.tissue = tissue;
  }


 /**
   * Builder method for cellType.
   *
   * @see Sample#setCellType Sample#setCellType for specification examples
   * @see Sample#getCellType Sample#getCellType for validation constraints
   * @param cellType a {@code List<Parameter>} parameter.
   * @return Sample
  **/
  public Sample cellType(List<Parameter> cellType) {
   this.cellType = cellType;
   return this;
  }

  /**
   * Add a single cellTypeItem to the cellType collection.
   *
   * @see Sample#getCellType Sample#getCellType for validation constraints
   * @param cellTypeItem a {@code Parameter} parameter.
   * @return Sample
   */
  public Sample addCellTypeItem(Parameter cellTypeItem) {
    if (this.cellType == null) {
      this.cellType = new ArrayList<>();
    }
    this.cellType.add(cellTypeItem);
    return this;
  }

   /**
   * Biological cell type information on the sample.
   *
   * @return cellType
  **/
  @Valid
  @ApiModelProperty(value = "Biological cell type information on the sample.")
  public List<Parameter> getCellType() {
    return cellType;
  }

 /**
   * Set cellType.
   *
   * 
   * 
   * @see #getCellType Sample#getCellType for validation constraints
   * @param cellType a {@code List<Parameter>} parameter.
  **/
  public void setCellType(List<Parameter> cellType) {
    this.cellType = cellType;
  }


 /**
   * Builder method for disease.
   *
   * @see Sample#setDisease Sample#setDisease for specification examples
   * @see Sample#getDisease Sample#getDisease for validation constraints
   * @param disease a {@code List<Parameter>} parameter.
   * @return Sample
  **/
  public Sample disease(List<Parameter> disease) {
   this.disease = disease;
   return this;
  }

  /**
   * Add a single diseaseItem to the disease collection.
   *
   * @see Sample#getDisease Sample#getDisease for validation constraints
   * @param diseaseItem a {@code Parameter} parameter.
   * @return Sample
   */
  public Sample addDiseaseItem(Parameter diseaseItem) {
    if (this.disease == null) {
      this.disease = new ArrayList<>();
    }
    this.disease.add(diseaseItem);
    return this;
  }

   /**
   * Disease information on the sample.
   *
   * @return disease
  **/
  @Valid
  @ApiModelProperty(value = "Disease information on the sample.")
  public List<Parameter> getDisease() {
    return disease;
  }

 /**
   * Set disease.
   *
   * 
   * 
   * @see #getDisease Sample#getDisease for validation constraints
   * @param disease a {@code List<Parameter>} parameter.
  **/
  public void setDisease(List<Parameter> disease) {
    this.disease = disease;
  }


 /**
   * Builder method for description.
   *
   * @see Sample#setDescription Sample#setDescription for specification examples
   * @see Sample#getDescription Sample#getDescription for validation constraints
   * @param description a {@code String} parameter.
   * @return Sample
  **/
  public Sample description(String description) {
   this.description = description;
   return this;
  }

   /**
   * A free form description of the sample.
   *
   * @return description
  **/
  @ApiModelProperty(value = "A free form description of the sample.")
  public String getDescription() {
    return description;
  }

 /**
   * Set description.
   *
   * 
   * 
   * @see #getDescription Sample#getDescription for validation constraints
   * @param description a {@code String} parameter.
  **/
  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sample sample = (Sample) o;
    return Objects.equals(this.name, sample.name) &&
        Objects.equals(this.custom, sample.custom) &&
        Objects.equals(this.species, sample.species) &&
        Objects.equals(this.tissue, sample.tissue) &&
        Objects.equals(this.cellType, sample.cellType) &&
        Objects.equals(this.disease, sample.disease) &&
        Objects.equals(this.description, sample.description) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, custom, species, tissue, cellType, disease, description, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sample {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    species: ").append(toIndentedString(species)).append("\n");
    sb.append("    tissue: ").append(toIndentedString(tissue)).append("\n");
    sb.append("    cellType: ").append(toIndentedString(cellType)).append("\n");
    sb.append("    disease: ").append(toIndentedString(disease)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

