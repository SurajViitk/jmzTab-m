/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.Assay;
import de.isas.mztab2.model.CV;
import de.isas.mztab2.model.ColumnParameterMapping;
import de.isas.mztab2.model.Contact;
import de.isas.mztab2.model.Database;
import de.isas.mztab2.model.Instrument;
import de.isas.mztab2.model.MsRun;
import de.isas.mztab2.model.Parameter;
import de.isas.mztab2.model.Publication;
import de.isas.mztab2.model.Sample;
import de.isas.mztab2.model.SampleProcessing;
import de.isas.mztab2.model.Software;
import de.isas.mztab2.model.StudyVariable;
import de.isas.mztab2.model.Uri;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * The metadata section provides additional information about the dataset(s) reported in the mzTab file. All fields in the metadata section are optional apart from those noted as mandatory. The fields in the metadata section MUST be reported in order of the various fields listed here. The field’s name and value MUST be separated by a tab character. 

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	mzTab-version	2.0.0-M
MTD	mzTab-ID	MTBL1234
MTD	title	Effects of Rapamycin on metabolite profile
...
</code></pre>
 * 
 *
 */
@ApiModel(description = "The metadata section provides additional information about the dataset(s) reported in the mzTab file. All fields in the metadata section are optional apart from those noted as mandatory. The fields in the metadata section MUST be reported in order of the various fields listed here. The field’s name and value MUST be separated by a tab character.  ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Metadata")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Metadata")
public class Metadata {

  /**
   * Property enumeration for Metadata.
   */
  public static enum Properties {
      prefix("prefix"), 
      mzTabVersion("mzTab-version"), 
      mzTabID("mzTab-ID"), 
      title("title"), 
      description("description"), 
      sampleProcessing("sample_processing"), 
      instrument("instrument"), 
      software("software"), 
      publication("publication"), 
      contact("contact"), 
      uri("uri"), 
      externalStudyUri("external_study_uri"), 
      quantificationMethod("quantification_method"), 
      studyVariable("study_variable"), 
      msRun("ms_run"), 
      assay("assay"), 
      sample("sample"), 
      custom("custom"), 
      cv("cv"), 
      database("database"), 
      derivatizationAgent("derivatization_agent"), 
      smallMoleculeQuantificationUnit("small_molecule-quantification_unit"), 
      smallMoleculeFeatureQuantificationUnit("small_molecule_feature-quantification_unit"), 
      smallMoleculeIdentificationReliability("small_molecule-identification_reliability"), 
      idConfidenceMeasure("id_confidence_measure"), 
      colunitSmallMolecule("colunit-small_molecule"), 
      colunitSmallMoleculeFeature("colunit-small_molecule_feature"), 
      colunitSmallMoleculeEvidence("colunit-small_molecule_evidence");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  /**
   * The metadata section prefix. MUST always be MTD.

   */
  public enum PrefixEnum {
    MTD("MTD");

    private String value;

    PrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrefixEnum fromValue(String text) {
      for (PrefixEnum b : PrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private PrefixEnum prefix = PrefixEnum.MTD;
  @JsonProperty("mzTab-version")
  @JacksonXmlProperty(localName = "mzTab-version")
  @XmlElement(name = "mzTab-version")
  private String mzTabVersion = null;
  @JsonProperty("mzTab-ID")
  @JacksonXmlProperty(localName = "mzTab-ID")
  @XmlElement(name = "mzTab-ID")
  private String mzTabID = null;
  @JsonProperty("title")
  @JacksonXmlProperty(localName = "title")
  @XmlElement(name = "title")
  private String title = null;
  @JsonProperty("description")
  @JacksonXmlProperty(localName = "description")
  @XmlElement(name = "description")
  private String description = null;
  @JsonProperty("sample_processing")
  // Is a container wrapped=false
  // items.name=sampleProcessing items.baseName=sampleProcessing items.xmlName= items.xmlNamespace=
  // items.example= items.type=SampleProcessing
  @XmlElement(name = "sampleProcessing")
  private List<SampleProcessing> sampleProcessing = null;
  @JsonProperty("instrument")
  // Is a container wrapped=false
  // items.name=instrument items.baseName=instrument items.xmlName= items.xmlNamespace=
  // items.example= items.type=Instrument
  @XmlElement(name = "instrument")
  private List<Instrument> instrument = null;
  @JsonProperty("software")
  // Is a container wrapped=false
  // items.name=software items.baseName=software items.xmlName= items.xmlNamespace=
  // items.example= items.type=Software
  @XmlElement(name = "software")
  private List<Software> software = new ArrayList<>();
  @JsonProperty("publication")
  // Is a container wrapped=false
  // items.name=publication items.baseName=publication items.xmlName= items.xmlNamespace=
  // items.example= items.type=Publication
  @XmlElement(name = "publication")
  private List<Publication> publication = null;
  @JsonProperty("contact")
  // Is a container wrapped=false
  // items.name=contact items.baseName=contact items.xmlName= items.xmlNamespace=
  // items.example= items.type=Contact
  @XmlElement(name = "contact")
  private List<Contact> contact = null;
  @JsonProperty("uri")
  // Is a container wrapped=false
  // items.name=uri items.baseName=uri items.xmlName= items.xmlNamespace=
  // items.example= items.type=Uri
  @XmlElement(name = "uri")
  private List<Uri> uri = null;
  @JsonProperty("external_study_uri")
  // Is a container wrapped=false
  // items.name=externalStudyUri items.baseName=externalStudyUri items.xmlName= items.xmlNamespace=
  // items.example= items.type=Uri
  @XmlElement(name = "externalStudyUri")
  private List<Uri> externalStudyUri = null;
  @JsonProperty("quantification_method")
  @JacksonXmlProperty(localName = "quantification_method")
  @XmlElement(name = "quantification_method")
  private Parameter quantificationMethod = null;
  @JsonProperty("study_variable")
  // Is a container wrapped=false
  // items.name=studyVariable items.baseName=studyVariable items.xmlName= items.xmlNamespace=
  // items.example= items.type=StudyVariable
  @XmlElement(name = "studyVariable")
  private List<StudyVariable> studyVariable = new ArrayList<>();
  @JsonProperty("ms_run")
  // Is a container wrapped=false
  // items.name=msRun items.baseName=msRun items.xmlName= items.xmlNamespace=
  // items.example= items.type=MsRun
  @XmlElement(name = "msRun")
  private List<MsRun> msRun = new ArrayList<>();
  @JsonProperty("assay")
  // Is a container wrapped=false
  // items.name=assay items.baseName=assay items.xmlName= items.xmlNamespace=
  // items.example= items.type=Assay
  @XmlElement(name = "assay")
  private List<Assay> assay = new ArrayList<>();
  @JsonProperty("sample")
  // Is a container wrapped=false
  // items.name=sample items.baseName=sample items.xmlName= items.xmlNamespace=
  // items.example= items.type=Sample
  @XmlElement(name = "sample")
  private List<Sample> sample = null;
  @JsonProperty("custom")
  // Is a container wrapped=false
  // items.name=custom items.baseName=custom items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "custom")
  private List<Parameter> custom = null;
  @JsonProperty("cv")
  // Is a container wrapped=false
  // items.name=cv items.baseName=cv items.xmlName= items.xmlNamespace=
  // items.example= items.type=CV
  @XmlElement(name = "cv")
  private List<CV> cv = new ArrayList<>();
  @JsonProperty("database")
  // Is a container wrapped=false
  // items.name=database items.baseName=database items.xmlName= items.xmlNamespace=
  // items.example= items.type=Database
  @XmlElement(name = "database")
  private List<Database> database = new ArrayList<>();
  @JsonProperty("derivatization_agent")
  // Is a container wrapped=false
  // items.name=derivatizationAgent items.baseName=derivatizationAgent items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "derivatizationAgent")
  private List<Parameter> derivatizationAgent = null;
  @JsonProperty("small_molecule-quantification_unit")
  @JacksonXmlProperty(localName = "small_molecule-quantification_unit")
  @XmlElement(name = "small_molecule-quantification_unit")
  private Parameter smallMoleculeQuantificationUnit = null;
  @JsonProperty("small_molecule_feature-quantification_unit")
  @JacksonXmlProperty(localName = "small_molecule_feature-quantification_unit")
  @XmlElement(name = "small_molecule_feature-quantification_unit")
  private Parameter smallMoleculeFeatureQuantificationUnit = null;
  @JsonProperty("small_molecule-identification_reliability")
  @JacksonXmlProperty(localName = "small_molecule-identification_reliability")
  @XmlElement(name = "small_molecule-identification_reliability")
  private Parameter smallMoleculeIdentificationReliability = null;
  @JsonProperty("id_confidence_measure")
  // Is a container wrapped=false
  // items.name=idConfidenceMeasure items.baseName=idConfidenceMeasure items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "idConfidenceMeasure")
  private List<Parameter> idConfidenceMeasure = new ArrayList<>();
  @JsonProperty("colunit-small_molecule")
  // Is a container wrapped=false
  // items.name=colunitSmallMolecule items.baseName=colunitSmallMolecule items.xmlName= items.xmlNamespace=
  // items.example= items.type=ColumnParameterMapping
  @XmlElement(name = "colunitSmallMolecule")
  private List<ColumnParameterMapping> colunitSmallMolecule = null;
  @JsonProperty("colunit-small_molecule_feature")
  // Is a container wrapped=false
  // items.name=colunitSmallMoleculeFeature items.baseName=colunitSmallMoleculeFeature items.xmlName= items.xmlNamespace=
  // items.example= items.type=ColumnParameterMapping
  @XmlElement(name = "colunitSmallMoleculeFeature")
  private List<ColumnParameterMapping> colunitSmallMoleculeFeature = null;
  @JsonProperty("colunit-small_molecule_evidence")
  // Is a container wrapped=false
  // items.name=colunitSmallMoleculeEvidence items.baseName=colunitSmallMoleculeEvidence items.xmlName= items.xmlNamespace=
  // items.example= items.type=ColumnParameterMapping
  @XmlElement(name = "colunitSmallMoleculeEvidence")
  private List<ColumnParameterMapping> colunitSmallMoleculeEvidence = null;

 /**
   * Builder method for prefix.
   *
   * @see Metadata#setPrefix Metadata#setPrefix for specification examples
   * @see Metadata#getPrefix Metadata#getPrefix for validation constraints
   * @param prefix a {@code PrefixEnum} parameter.
   * @return Metadata
  **/
  public Metadata prefix(PrefixEnum prefix) {
   this.prefix = prefix;
   return this;
  }

   /**
   * The metadata section prefix. MUST always be MTD.

   *
   * @return prefix
  **/
  @NotNull
  @ApiModelProperty(example = "MTD", required = true, value = "The metadata section prefix. MUST always be MTD. ")
  public PrefixEnum getPrefix() {
    return prefix;
  }

 /**
   * Set prefix.
   *
   * 
   * 
   * @see #getPrefix Metadata#getPrefix for validation constraints
   * @param prefix a {@code PrefixEnum} parameter.
  **/
  public void setPrefix(PrefixEnum prefix) {
    this.prefix = prefix;
  }


 /**
   * Builder method for mzTabVersion.
   *
   * @see Metadata#setMzTabVersion Metadata#setMzTabVersion for specification examples
   * @see Metadata#getMzTabVersion Metadata#getMzTabVersion for validation constraints
   * @param mzTabVersion a {@code String} parameter.
   * @return Metadata
  **/
  public Metadata mzTabVersion(String mzTabVersion) {
   this.mzTabVersion = mzTabVersion;
   return this;
  }

   /**
   * The version of the mzTab file. The suffix MUST be &quot;-M&quot; for mzTab for metabolomics (mzTab-M).

   *
   * @return mzTabVersion
  **/
  @NotNull
 @Pattern(regexp="^\\d{1}\\.\\d{1}\\.\\d{1}-[A-Z]{1}$")  @ApiModelProperty(required = true, value = "The version of the mzTab file. The suffix MUST be \"-M\" for mzTab for metabolomics (mzTab-M). ")
  public String getMzTabVersion() {
    return mzTabVersion;
  }

 /**
   * Set mzTabVersion.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	mzTab-version	2.0.0-M
MTD	mzTab-version	2.0.1-M
</code></pre>
   * 
   * 
   * @see #getMzTabVersion Metadata#getMzTabVersion for validation constraints
   * @param mzTabVersion a {@code String} parameter.
  **/
  public void setMzTabVersion(String mzTabVersion) {
    this.mzTabVersion = mzTabVersion;
  }


 /**
   * Builder method for mzTabID.
   *
   * @see Metadata#setMzTabID Metadata#setMzTabID for specification examples
   * @see Metadata#getMzTabID Metadata#getMzTabID for validation constraints
   * @param mzTabID a {@code String} parameter.
   * @return Metadata
  **/
  public Metadata mzTabID(String mzTabID) {
   this.mzTabID = mzTabID;
   return this;
  }

   /**
   * The ID of the mzTab file, this could be supplied by the repository from which it is downloaded or a local identifier from the lab producing the file. It is not intended to be a globally unique ID but carry some locally useful meaning.

   *
   * @return mzTabID
  **/
  @NotNull
  @ApiModelProperty(example = "MTD mzTab-ID MTBLS214", required = true, value = "The ID of the mzTab file, this could be supplied by the repository from which it is downloaded or a local identifier from the lab producing the file. It is not intended to be a globally unique ID but carry some locally useful meaning. ")
  public String getMzTabID() {
    return mzTabID;
  }

 /**
   * Set mzTabID.
   *
   * 
   * 
   * @see #getMzTabID Metadata#getMzTabID for validation constraints
   * @param mzTabID a {@code String} parameter.
  **/
  public void setMzTabID(String mzTabID) {
    this.mzTabID = mzTabID;
  }


 /**
   * Builder method for title.
   *
   * @see Metadata#setTitle Metadata#setTitle for specification examples
   * @see Metadata#getTitle Metadata#getTitle for validation constraints
   * @param title a {@code String} parameter.
   * @return Metadata
  **/
  public Metadata title(String title) {
   this.title = title;
   return this;
  }

   /**
   * The file’s human readable title.

   *
   * @return title
  **/
  @ApiModelProperty(example = "MTD title My first test experiment", value = "The file’s human readable title. ")
  public String getTitle() {
    return title;
  }

 /**
   * Set title.
   *
   * 
   * 
   * @see #getTitle Metadata#getTitle for validation constraints
   * @param title a {@code String} parameter.
  **/
  public void setTitle(String title) {
    this.title = title;
  }


 /**
   * Builder method for description.
   *
   * @see Metadata#setDescription Metadata#setDescription for specification examples
   * @see Metadata#getDescription Metadata#getDescription for validation constraints
   * @param description a {@code String} parameter.
   * @return Metadata
  **/
  public Metadata description(String description) {
   this.description = description;
   return this;
  }

   /**
   * The file’s human readable description.

   *
   * @return description
  **/
  @ApiModelProperty(example = "MTD description An experiment investigating the effects of Il-6.", value = "The file’s human readable description. ")
  public String getDescription() {
    return description;
  }

 /**
   * Set description.
   *
   * 
   * 
   * @see #getDescription Metadata#getDescription for validation constraints
   * @param description a {@code String} parameter.
  **/
  public void setDescription(String description) {
    this.description = description;
  }


 /**
   * Builder method for sampleProcessing.
   *
   * @see Metadata#setSampleProcessing Metadata#setSampleProcessing for specification examples
   * @see Metadata#getSampleProcessing Metadata#getSampleProcessing for validation constraints
   * @param sampleProcessing a {@code List<SampleProcessing>} parameter.
   * @return Metadata
  **/
  public Metadata sampleProcessing(List<SampleProcessing> sampleProcessing) {
   this.sampleProcessing = sampleProcessing;
   return this;
  }

  /**
   * Add a single sampleProcessingItem to the sampleProcessing collection.
   *
   * @see Metadata#getSampleProcessing Metadata#getSampleProcessing for validation constraints
   * @param sampleProcessingItem a {@code SampleProcessing} parameter.
   * @return Metadata
   */
  public Metadata addSampleProcessingItem(SampleProcessing sampleProcessingItem) {
    if (this.sampleProcessing == null) {
      this.sampleProcessing = new ArrayList<>();
    }
    this.sampleProcessing.add(sampleProcessingItem);
    return this;
  }

   /**
   * A list of parameters describing a sample processing, preparation or handling step similar to a biological or analytical methods report. The order of the sample_processing items should reflect the order these processing steps were performed in. If multiple parameters are given for a step these MUST be separated by a “|”. If derivatization was performed, it MUST be reported here as a general step, e.g. &#39;silylation&#39; and the actual derivatization agens MUST be specified in the Section 6.2.54 part.

   *
   * @return sampleProcessing
  **/
  @Valid
  @ApiModelProperty(value = "A list of parameters describing a sample processing, preparation or handling step similar to a biological or analytical methods report. The order of the sample_processing items should reflect the order these processing steps were performed in. If multiple parameters are given for a step these MUST be separated by a “|”. If derivatization was performed, it MUST be reported here as a general step, e.g. 'silylation' and the actual derivatization agens MUST be specified in the Section 6.2.54 part. ")
  public List<SampleProcessing> getSampleProcessing() {
    return sampleProcessing;
  }

 /**
   * Set sampleProcessing.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	sample_processing[1]	[MSIO, MSIO:0000107, metabolism quenching using precooled 60 percent methanol ammonium bicarbonate buffer,]
MTD	sample_processing[2]	[MSIO, MSIO:0000146, centrifugation,]
MTD	sample_processing[3]	[MSIO, MSIO:0000141, metabolite extraction,]
MTD	sample_processing[4]	[MSIO, MSIO:0000141, silylation,]
</code></pre>
   * 
   * 
   * @see #getSampleProcessing Metadata#getSampleProcessing for validation constraints
   * @param sampleProcessing a {@code List<SampleProcessing>} parameter.
  **/
  public void setSampleProcessing(List<SampleProcessing> sampleProcessing) {
    this.sampleProcessing = sampleProcessing;
  }


 /**
   * Builder method for instrument.
   *
   * @see Metadata#setInstrument Metadata#setInstrument for specification examples
   * @see Metadata#getInstrument Metadata#getInstrument for validation constraints
   * @param instrument a {@code List<Instrument>} parameter.
   * @return Metadata
  **/
  public Metadata instrument(List<Instrument> instrument) {
   this.instrument = instrument;
   return this;
  }

  /**
   * Add a single instrumentItem to the instrument collection.
   *
   * @see Metadata#getInstrument Metadata#getInstrument for validation constraints
   * @param instrumentItem a {@code Instrument} parameter.
   * @return Metadata
   */
  public Metadata addInstrumentItem(Instrument instrumentItem) {
    if (this.instrument == null) {
      this.instrument = new ArrayList<>();
    }
    this.instrument.add(instrumentItem);
    return this;
  }

   /**
   * The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].
   *
   * @return instrument
  **/
  @Valid
  @ApiModelProperty(value = "The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].")
  public List<Instrument> getInstrument() {
    return instrument;
  }

 /**
   * Set instrument.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	instrument[1]-name	[MS, MS:1000449, LTQ Orbitrap,]
MTD	instrument[1]-source	[MS, MS:1000073, ESI,]
…
MTD	instrument[2]-source	[MS, MS:1000598, ETD,]
MTD	instrument[1]-analyzer[1]	[MS, MS:1000291, linear ion trap,]
…
MTD	instrument[2]-analyzer[1]	[MS, MS:1000484, orbitrap,]
MTD	instrument[1]-detector	[MS, MS:1000253, electron multiplier,]
…
MTD	instrument[2]-detector	[MS, MS:1000348, focal plane collector,]
</code></pre>
   * 
   * 
   * @see #getInstrument Metadata#getInstrument for validation constraints
   * @param instrument a {@code List<Instrument>} parameter.
  **/
  public void setInstrument(List<Instrument> instrument) {
    this.instrument = instrument;
  }


 /**
   * Builder method for software.
   *
   * @see Metadata#setSoftware Metadata#setSoftware for specification examples
   * @see Metadata#getSoftware Metadata#getSoftware for validation constraints
   * @param software a {@code List<Software>} parameter.
   * @return Metadata
  **/
  public Metadata software(List<Software> software) {
   this.software = software;
   return this;
  }

  /**
   * Add a single softwareItem to the software collection.
   *
   * @see Metadata#getSoftware Metadata#getSoftware for validation constraints
   * @param softwareItem a {@code Software} parameter.
   * @return Metadata
   */
  public Metadata addSoftwareItem(Software softwareItem) {
    this.software.add(softwareItem);
    return this;
  }

   /**
   * Software used to analyze the data and obtain the reported results. The parameter’s value SHOULD contain the software’s version. The order (numbering) should reflect the order in which the tools were used. A software setting used. This field MAY occur multiple times for a single software. The value of this field is deliberately set as a String, since there currently do not exist CV terms for every possible setting.
   *
   * @return software
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Software used to analyze the data and obtain the reported results. The parameter’s value SHOULD contain the software’s version. The order (numbering) should reflect the order in which the tools were used. A software setting used. This field MAY occur multiple times for a single software. The value of this field is deliberately set as a String, since there currently do not exist CV terms for every possible setting.")
  public List<Software> getSoftware() {
    return software;
  }

 /**
   * Set software.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	software[1]	[MS, MS:1002879, Progenesis QI, 3.0]
MTD	software[1]-setting	Fragment tolerance = 0.1 Da
…
MTD	software[2]-setting	Parent tolerance = 0.5 Da
</code></pre>
   * 
   * 
   * @see #getSoftware Metadata#getSoftware for validation constraints
   * @param software a {@code List<Software>} parameter.
  **/
  public void setSoftware(List<Software> software) {
    this.software = software;
  }


 /**
   * Builder method for publication.
   *
   * @see Metadata#setPublication Metadata#setPublication for specification examples
   * @see Metadata#getPublication Metadata#getPublication for validation constraints
   * @param publication a {@code List<Publication>} parameter.
   * @return Metadata
  **/
  public Metadata publication(List<Publication> publication) {
   this.publication = publication;
   return this;
  }

  /**
   * Add a single publicationItem to the publication collection.
   *
   * @see Metadata#getPublication Metadata#getPublication for validation constraints
   * @param publicationItem a {@code Publication} parameter.
   * @return Metadata
   */
  public Metadata addPublicationItem(Publication publicationItem) {
    if (this.publication == null) {
      this.publication = new ArrayList<>();
    }
    this.publication.add(publicationItem);
    return this;
  }

   /**
   * A publication associated with this file. Several publications can be given by indicating the number in the square brackets after “publication”. PubMed ids must be prefixed by “pubmed:”, DOIs by “doi:”. Multiple identifiers MUST be separated by “|”.
   *
   * @return publication
  **/
  @Valid
  @ApiModelProperty(value = "A publication associated with this file. Several publications can be given by indicating the number in the square brackets after “publication”. PubMed ids must be prefixed by “pubmed:”, DOIs by “doi:”. Multiple identifiers MUST be separated by “|”.")
  public List<Publication> getPublication() {
    return publication;
  }

 /**
   * Set publication.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	publication[1]	pubmed:21063943|doi:10.1007/978-1-60761-987-1_6
MTD	publication[2]	pubmed:20615486|doi:10.1016/j.jprot.2010.06.008
</code></pre>
   * 
   * 
   * @see #getPublication Metadata#getPublication for validation constraints
   * @param publication a {@code List<Publication>} parameter.
  **/
  public void setPublication(List<Publication> publication) {
    this.publication = publication;
  }


 /**
   * Builder method for contact.
   *
   * @see Metadata#setContact Metadata#setContact for specification examples
   * @see Metadata#getContact Metadata#getContact for validation constraints
   * @param contact a {@code List<Contact>} parameter.
   * @return Metadata
  **/
  public Metadata contact(List<Contact> contact) {
   this.contact = contact;
   return this;
  }

  /**
   * Add a single contactItem to the contact collection.
   *
   * @see Metadata#getContact Metadata#getContact for validation constraints
   * @param contactItem a {@code Contact} parameter.
   * @return Metadata
   */
  public Metadata addContactItem(Contact contactItem) {
    if (this.contact == null) {
      this.contact = new ArrayList<>();
    }
    this.contact.add(contactItem);
    return this;
  }

   /**
   * The contact’s name, affiliation and e-mail. Several contacts can be given by indicating the number in the square brackets after &quot;contact&quot;. A contact has to be supplied in the format [first name] [initials] [last name].
   *
   * @return contact
  **/
  @Valid
  @ApiModelProperty(value = "The contact’s name, affiliation and e-mail. Several contacts can be given by indicating the number in the square brackets after \"contact\". A contact has to be supplied in the format [first name] [initials] [last name].")
  public List<Contact> getContact() {
    return contact;
  }

 /**
   * Set contact.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	contact[1]-name	James D. Watson
MTD	contact[1]-affiliation	Cambridge University, UK
MTD	contact[1]-email	watson@cam.ac.uk
MTD	contact[2]-name	Francis Crick
MTD	contact[2]-affiliation	Cambridge University, UK
MTD	contact[2]-email	crick@cam.ac.uk
</code></pre>
   * 
   * 
   * @see #getContact Metadata#getContact for validation constraints
   * @param contact a {@code List<Contact>} parameter.
  **/
  public void setContact(List<Contact> contact) {
    this.contact = contact;
  }


 /**
   * Builder method for uri.
   *
   * @see Metadata#setUri Metadata#setUri for specification examples
   * @see Metadata#getUri Metadata#getUri for validation constraints
   * @param uri a {@code List<Uri>} parameter.
   * @return Metadata
  **/
  public Metadata uri(List<Uri> uri) {
   this.uri = uri;
   return this;
  }

  /**
   * Add a single uriItem to the uri collection.
   *
   * @see Metadata#getUri Metadata#getUri for validation constraints
   * @param uriItem a {@code Uri} parameter.
   * @return Metadata
   */
  public Metadata addUriItem(Uri uriItem) {
    if (this.uri == null) {
      this.uri = new ArrayList<>();
    }
    this.uri.add(uriItem);
    return this;
  }

   /**
   * A URI pointing to the file’s source data (e.g., a MetaboLights records).
   *
   * @return uri
  **/
  @Valid
  @ApiModelProperty(value = "A URI pointing to the file’s source data (e.g., a MetaboLights records).")
  public List<Uri> getUri() {
    return uri;
  }

 /**
   * Set uri.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	uri[1]	https://www.ebi.ac.uk/metabolights/MTBLS517
</code></pre>
   * 
   * 
   * @see #getUri Metadata#getUri for validation constraints
   * @param uri a {@code List<Uri>} parameter.
  **/
  public void setUri(List<Uri> uri) {
    this.uri = uri;
  }


 /**
   * Builder method for externalStudyUri.
   *
   * @see Metadata#setExternalStudyUri Metadata#setExternalStudyUri for specification examples
   * @see Metadata#getExternalStudyUri Metadata#getExternalStudyUri for validation constraints
   * @param externalStudyUri a {@code List<Uri>} parameter.
   * @return Metadata
  **/
  public Metadata externalStudyUri(List<Uri> externalStudyUri) {
   this.externalStudyUri = externalStudyUri;
   return this;
  }

  /**
   * Add a single externalStudyUriItem to the externalStudyUri collection.
   *
   * @see Metadata#getExternalStudyUri Metadata#getExternalStudyUri for validation constraints
   * @param externalStudyUriItem a {@code Uri} parameter.
   * @return Metadata
   */
  public Metadata addExternalStudyUriItem(Uri externalStudyUriItem) {
    if (this.externalStudyUri == null) {
      this.externalStudyUri = new ArrayList<>();
    }
    this.externalStudyUri.add(externalStudyUriItem);
    return this;
  }

   /**
   * A URI pointing to an external file with more details about the study design (e.g., an ISA-TAB file).
   *
   * @return externalStudyUri
  **/
  @Valid
  @ApiModelProperty(value = "A URI pointing to an external file with more details about the study design (e.g., an ISA-TAB file).")
  public List<Uri> getExternalStudyUri() {
    return externalStudyUri;
  }

 /**
   * Set externalStudyUri.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	external_study_uri[1]	https://www.ebi.ac.uk/metabolights/MTBLS517/files/i_Investigation.txt
</code></pre>
   * 
   * 
   * @see #getExternalStudyUri Metadata#getExternalStudyUri for validation constraints
   * @param externalStudyUri a {@code List<Uri>} parameter.
  **/
  public void setExternalStudyUri(List<Uri> externalStudyUri) {
    this.externalStudyUri = externalStudyUri;
  }


 /**
   * Builder method for quantificationMethod.
   *
   * @see Metadata#setQuantificationMethod Metadata#setQuantificationMethod for specification examples
   * @see Metadata#getQuantificationMethod Metadata#getQuantificationMethod for validation constraints
   * @param quantificationMethod a {@code Parameter} parameter.
   * @return Metadata
  **/
  public Metadata quantificationMethod(Parameter quantificationMethod) {
   this.quantificationMethod = quantificationMethod;
   return this;
  }

   /**
   * The quantification method used in the experiment reported in the file.
   *
   * @return quantificationMethod
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The quantification method used in the experiment reported in the file.")
  public Parameter getQuantificationMethod() {
    return quantificationMethod;
  }

 /**
   * Set quantificationMethod.
   *
   * 
   * 
   * @see #getQuantificationMethod Metadata#getQuantificationMethod for validation constraints
   * @param quantificationMethod a {@code Parameter} parameter.
  **/
  public void setQuantificationMethod(Parameter quantificationMethod) {
    this.quantificationMethod = quantificationMethod;
  }


 /**
   * Builder method for studyVariable.
   *
   * @see Metadata#setStudyVariable Metadata#setStudyVariable for specification examples
   * @see Metadata#getStudyVariable Metadata#getStudyVariable for validation constraints
   * @param studyVariable a {@code List<StudyVariable>} parameter.
   * @return Metadata
  **/
  public Metadata studyVariable(List<StudyVariable> studyVariable) {
   this.studyVariable = studyVariable;
   return this;
  }

  /**
   * Add a single studyVariableItem to the studyVariable collection.
   *
   * @see Metadata#getStudyVariable Metadata#getStudyVariable for validation constraints
   * @param studyVariableItem a {@code StudyVariable} parameter.
   * @return Metadata
   */
  public Metadata addStudyVariableItem(StudyVariable studyVariableItem) {
    this.studyVariable.add(studyVariableItem);
    return this;
  }

   /**
   * Specification of study_variable.
(empty) name: A name for each study variable (experimental condition or factor), to serve as a list of the study variables that MUST be reported in the following tables. For software that does not capture study variables, a single study variable MUST be reported, linking to all assays. This single study variable MUST have the identifier “undefined“.
assay_refs: Bar-separated references to the IDs of assays grouped in the study variable.
average_function: The function used to calculate the study variable quantification value and the operation used is not arithmetic mean (default) e.g. “geometric mean”, “median”. The 1-n refers to different study variables.
variation_function: The function used to calculate the study variable quantification variation value if it is reported and the operation used is not coefficient of variation (default) e.g. “standard error”.
description: A textual description of the study variable.
factors: Additional parameters or factors, separated by bars, that are known about study variables allowing the capture of more complex, such as nested designs.

   *
   * @return studyVariable
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Specification of study_variable. (empty) name: A name for each study variable (experimental condition or factor), to serve as a list of the study variables that MUST be reported in the following tables. For software that does not capture study variables, a single study variable MUST be reported, linking to all assays. This single study variable MUST have the identifier “undefined“. assay_refs: Bar-separated references to the IDs of assays grouped in the study variable. average_function: The function used to calculate the study variable quantification value and the operation used is not arithmetic mean (default) e.g. “geometric mean”, “median”. The 1-n refers to different study variables. variation_function: The function used to calculate the study variable quantification variation value if it is reported and the operation used is not coefficient of variation (default) e.g. “standard error”. description: A textual description of the study variable. factors: Additional parameters or factors, separated by bars, that are known about study variables allowing the capture of more complex, such as nested designs. ")
  public List<StudyVariable> getStudyVariable() {
    return studyVariable;
  }

 /**
   * Set studyVariable.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	study_variable[1]	control
MTD	study_variable[1]-assay_refs	assay[1]| assay[2]| assay[3]
MTD	study_variable-average_function	[MS, MS:1002883, median, ]
MTD	study_variable-variation_function	[MS, MS:1002885, standard error, ]
MTD	study_variable[1]-description	Group B (spike-in 0.74 fmol/uL)
MTD	study_variable[1]-factors	[,,rapamycin dose,0.5mg]
MTD	study_variable[2]	1 minute
</code></pre>
   * 
   * 
   * @see #getStudyVariable Metadata#getStudyVariable for validation constraints
   * @param studyVariable a {@code List<StudyVariable>} parameter.
  **/
  public void setStudyVariable(List<StudyVariable> studyVariable) {
    this.studyVariable = studyVariable;
  }


 /**
   * Builder method for msRun.
   *
   * @see Metadata#setMsRun Metadata#setMsRun for specification examples
   * @see Metadata#getMsRun Metadata#getMsRun for validation constraints
   * @param msRun a {@code List<MsRun>} parameter.
   * @return Metadata
  **/
  public Metadata msRun(List<MsRun> msRun) {
   this.msRun = msRun;
   return this;
  }

  /**
   * Add a single msRunItem to the msRun collection.
   *
   * @see Metadata#getMsRun Metadata#getMsRun for validation constraints
   * @param msRunItem a {@code MsRun} parameter.
   * @return Metadata
   */
  public Metadata addMsRunItem(MsRun msRunItem) {
    this.msRun.add(msRunItem);
    return this;
  }

   /**
   * Specification of ms_run. 
location: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a “null” MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay. 
instrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run. 
format: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1. 
id_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present.
fragmentation_method: The type(s) of fragmentation used in a given ms run.
scan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs.
hash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.
hash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.

   *
   * @return msRun
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Specification of ms_run.  location: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a “null” MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay.  instrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run.  format: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1.  id_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present. fragmentation_method: The type(s) of fragmentation used in a given ms run. scan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs. hash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present. hash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present. ")
  public List<MsRun> getMsRun() {
    return msRun;
  }

 /**
   * Set msRun.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>COM	location can be a local or remote URI
MTD	ms_run[1]-location	file:///C:/path/to/my/file.mzML
MTD	ms_run[1]-instrument_ref	instrument[1]
MTD	ms_run[1]-format	[MS, MS:1000584, mzML file, ]
MTD	ms_run[1]-id_format	[MS, MS:1000530, mzML unique identifier, ]
MTD	ms_run[1]-fragmentation_method[1]	[MS, MS:1000133, CID, ]
COM	for mixed polarity scan scenarios
MTD	ms_run[1]-scan_polarity[1]	[MS, MS:1000130, positive scan, ]
MTD	ms_run[1]-scan_polarity[2]	[MS, MS:1000129, negative scan, ]
MTD	ms_run[1]-hash_method	[MS, MS:1000569, SHA-1, ]
MTD	ms_run[1]-hash	de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3
</code></pre>
   * 
   * 
   * @see #getMsRun Metadata#getMsRun for validation constraints
   * @param msRun a {@code List<MsRun>} parameter.
  **/
  public void setMsRun(List<MsRun> msRun) {
    this.msRun = msRun;
  }


 /**
   * Builder method for assay.
   *
   * @see Metadata#setAssay Metadata#setAssay for specification examples
   * @see Metadata#getAssay Metadata#getAssay for validation constraints
   * @param assay a {@code List<Assay>} parameter.
   * @return Metadata
  **/
  public Metadata assay(List<Assay> assay) {
   this.assay = assay;
   return this;
  }

  /**
   * Add a single assayItem to the assay collection.
   *
   * @see Metadata#getAssay Metadata#getAssay for validation constraints
   * @param assayItem a {@code Assay} parameter.
   * @return Metadata
   */
  public Metadata addAssayItem(Assay assayItem) {
    this.assay.add(assayItem);
    return this;
  }

   /**
   * Specification of assay.
(empty) name: A name for each assay, to serve as a list of the assays that MUST be reported in the following tables. 
custom: Additional custom parameters or values for a given assay. 
external_uri: An external reference uri to further information about the assay, for example via a reference to an object within an ISA-TAB file. 
sample_ref: An association from a given assay to the sample analysed. 
ms_run_ref: An association from a given assay to the source MS run. All assays MUST reference exactly one ms_run unless a workflow with pre-fractionation is being encoded, in which case each assay MUST reference n ms_runs where n fractions have been collected. Multiple assays SHOULD reference the same ms_run to capture multiplexed experimental designs.

   *
   * @return assay
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Specification of assay. (empty) name: A name for each assay, to serve as a list of the assays that MUST be reported in the following tables.  custom: Additional custom parameters or values for a given assay.  external_uri: An external reference uri to further information about the assay, for example via a reference to an object within an ISA-TAB file.  sample_ref: An association from a given assay to the sample analysed.  ms_run_ref: An association from a given assay to the source MS run. All assays MUST reference exactly one ms_run unless a workflow with pre-fractionation is being encoded, in which case each assay MUST reference n ms_runs where n fractions have been collected. Multiple assays SHOULD reference the same ms_run to capture multiplexed experimental designs. ")
  public List<Assay> getAssay() {
    return assay;
  }

 /**
   * Set assay.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	assay[1]	first assay
MTD	assay[1]-custom[1]	[MS, , Assay operator, Fred Blogs]
MTD	assay[1]-sample_ref	sample[1]
MTD	assay[1]-ms_run_ref	ms_run[1]
MTD	assay[1]-external_uri	https://www.ebi.ac.uk/metabolights/MTBLS517/files/i_Investigation.txt?STUDYASSAY=a_e04_c18pos.txt
MTD	assay[2]	second assay
MTD	assay[2]-sample_ref	sample[2]
</code></pre>
   * 
   * 
   * @see #getAssay Metadata#getAssay for validation constraints
   * @param assay a {@code List<Assay>} parameter.
  **/
  public void setAssay(List<Assay> assay) {
    this.assay = assay;
  }


 /**
   * Builder method for sample.
   *
   * @see Metadata#setSample Metadata#setSample for specification examples
   * @see Metadata#getSample Metadata#getSample for validation constraints
   * @param sample a {@code List<Sample>} parameter.
   * @return Metadata
  **/
  public Metadata sample(List<Sample> sample) {
   this.sample = sample;
   return this;
  }

  /**
   * Add a single sampleItem to the sample collection.
   *
   * @see Metadata#getSample Metadata#getSample for validation constraints
   * @param sampleItem a {@code Sample} parameter.
   * @return Metadata
   */
  public Metadata addSampleItem(Sample sampleItem) {
    if (this.sample == null) {
      this.sample = new ArrayList<>();
    }
    this.sample.add(sampleItem);
    return this;
  }

   /**
   * Specification of sample.
(empty) name: A name for each sample to serve as a list of the samples that MUST be reported in the following tables. Samples MUST be reported if a statistical design is being captured (i.e. bio or tech replicates). If the type of replicates are not known, samples SHOULD NOT be reported. 
species: The respective species of the samples analysed. For more complex cases, such as metagenomics, optional columns and userParams should be used. 
tissue: The respective tissue(s) of the sample. 
cell_type: The respective cell type(s) of the sample. 
disease: The respective disease(s) of the sample. 
description: A human readable description of the sample. 
custom: Custom parameters describing the sample’s additional properties. Dates MUST be provided in ISO-8601 format.

   *
   * @return sample
  **/
  @Valid
  @ApiModelProperty(value = "Specification of sample. (empty) name: A name for each sample to serve as a list of the samples that MUST be reported in the following tables. Samples MUST be reported if a statistical design is being captured (i.e. bio or tech replicates). If the type of replicates are not known, samples SHOULD NOT be reported.  species: The respective species of the samples analysed. For more complex cases, such as metagenomics, optional columns and userParams should be used.  tissue: The respective tissue(s) of the sample.  cell_type: The respective cell type(s) of the sample.  disease: The respective disease(s) of the sample.  description: A human readable description of the sample.  custom: Custom parameters describing the sample’s additional properties. Dates MUST be provided in ISO-8601 format. ")
  public List<Sample> getSample() {
    return sample;
  }

 /**
   * Set sample.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>COM	Experiment where all samples consisted of the same two species
MTD	sample[1]	individual number 1
MTD	sample[1]-species[1]	[NCBITaxon, NCBITaxon:9606, Homo sapiens, ]
MTD	sample[1]-tissue[1]	[BTO, BTO:0000759, liver, ]
MTD	sample[1]-cell_type[1]	[CL, CL:0000182, hepatocyte, ]
MTD	sample[1]-disease[1]	[DOID, DOID:684, hepatocellular carcinoma, ]
MTD	sample[1]-disease[2]	[DOID, DOID:9451, alcoholic fatty liver, ]
MTD	sample[1]-description	Hepatocellular carcinoma samples.
MTD	sample[1]-custom[1]	[,,Extraction date, 2011-12-21]
MTD	sample[1]-custom[2]	[,,Extraction reason, liver biopsy]
MTD	sample[2]	individual number 2
MTD	sample[2]-species[1]	[NCBITaxon, NCBITaxon:9606, Homo sapiens, ]
MTD	sample[2]-tissue[1]	[BTO, BTO:0000759, liver, ]
MTD	sample[2]-cell_type[1]	[CL, CL:0000182, hepatocyte, ]
MTD	sample[2]-description	Healthy control samples.
</code></pre>
   * 
   * 
   * @see #getSample Metadata#getSample for validation constraints
   * @param sample a {@code List<Sample>} parameter.
  **/
  public void setSample(List<Sample> sample) {
    this.sample = sample;
  }


 /**
   * Builder method for custom.
   *
   * @see Metadata#setCustom Metadata#setCustom for specification examples
   * @see Metadata#getCustom Metadata#getCustom for validation constraints
   * @param custom a {@code List<Parameter>} parameter.
   * @return Metadata
  **/
  public Metadata custom(List<Parameter> custom) {
   this.custom = custom;
   return this;
  }

  /**
   * Add a single customItem to the custom collection.
   *
   * @see Metadata#getCustom Metadata#getCustom for validation constraints
   * @param customItem a {@code Parameter} parameter.
   * @return Metadata
   */
  public Metadata addCustomItem(Parameter customItem) {
    if (this.custom == null) {
      this.custom = new ArrayList<>();
    }
    this.custom.add(customItem);
    return this;
  }

   /**
   * Any additional parameters describing the analysis reported.
   *
   * @return custom
  **/
  @Valid
  @ApiModelProperty(value = "Any additional parameters describing the analysis reported.")
  public List<Parameter> getCustom() {
    return custom;
  }

 /**
   * Set custom.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD custom[1] [,,MS operator, Florian]
</code></pre>
   * 
   * 
   * @see #getCustom Metadata#getCustom for validation constraints
   * @param custom a {@code List<Parameter>} parameter.
  **/
  public void setCustom(List<Parameter> custom) {
    this.custom = custom;
  }


 /**
   * Builder method for cv.
   *
   * @see Metadata#setCv Metadata#setCv for specification examples
   * @see Metadata#getCv Metadata#getCv for validation constraints
   * @param cv a {@code List<CV>} parameter.
   * @return Metadata
  **/
  public Metadata cv(List<CV> cv) {
   this.cv = cv;
   return this;
  }

  /**
   * Add a single cvItem to the cv collection.
   *
   * @see Metadata#getCv Metadata#getCv for validation constraints
   * @param cvItem a {@code CV} parameter.
   * @return Metadata
   */
  public Metadata addCvItem(CV cvItem) {
    this.cv.add(cvItem);
    return this;
  }

   /**
   * Specification of controlled vocabularies.
label: A string describing the labels of the controlled vocabularies/ontologies used in the mzTab file as a short-hand e.g. &quot;MS&quot; for PSI-MS.
full_name: A string describing the full names of the controlled vocabularies/ontologies used in the mzTab file.
version: A string describing the version of the controlled vocabularies/ontologies used in the mzTab file.
uri: A string containing the URIs of the controlled vocabularies/ontologies used in the mzTab file.

   *
   * @return cv
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Specification of controlled vocabularies. label: A string describing the labels of the controlled vocabularies/ontologies used in the mzTab file as a short-hand e.g. \"MS\" for PSI-MS. full_name: A string describing the full names of the controlled vocabularies/ontologies used in the mzTab file. version: A string describing the version of the controlled vocabularies/ontologies used in the mzTab file. uri: A string containing the URIs of the controlled vocabularies/ontologies used in the mzTab file. ")
  public List<CV> getCv() {
    return cv;
  }

 /**
   * Set cv.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	cv[1]-label	MS
MTD	cv[1]-full_name	PSI-MS controlled vocabulary
MTD	cv[1]-version	4.1.11
MTD	cv[1]-uri	https://raw.githubusercontent.com/HUPO-PSI/psi-ms-CV/master/psi-ms.obo
</code></pre>
   * 
   * 
   * @see #getCv Metadata#getCv for validation constraints
   * @param cv a {@code List<CV>} parameter.
  **/
  public void setCv(List<CV> cv) {
    this.cv = cv;
  }


 /**
   * Builder method for database.
   *
   * @see Metadata#setDatabase Metadata#setDatabase for specification examples
   * @see Metadata#getDatabase Metadata#getDatabase for validation constraints
   * @param database a {@code List<Database>} parameter.
   * @return Metadata
  **/
  public Metadata database(List<Database> database) {
   this.database = database;
   return this;
  }

  /**
   * Add a single databaseItem to the database collection.
   *
   * @see Metadata#getDatabase Metadata#getDatabase for validation constraints
   * @param databaseItem a {@code Database} parameter.
   * @return Metadata
   */
  public Metadata addDatabaseItem(Database databaseItem) {
    this.database.add(databaseItem);
    return this;
  }

   /**
   * Specification of databases.
(empty): The description of databases used. For cases, where a known database has not been used for identification, a userParam SHOULD be inserted to describe any identification performed e.g. de novo. If no identification has been performed at all then &quot;no database&quot; should be inserted followed by null.
prefix: The prefix used in the “identifier” column of data tables. For the “no database” case &quot;null&quot; must be used.
version: The database version is mandatory where identification has been performed. This may be a formal version number e.g. “1.4.1”, a date of access “2016-10-27” (ISO-8601 format) or “Unknown” if there is no suitable version that can be annotated.
uri: The URI to the database. For the “no database” case, &quot;null&quot; must be reported.

   *
   * @return database
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Specification of databases. (empty): The description of databases used. For cases, where a known database has not been used for identification, a userParam SHOULD be inserted to describe any identification performed e.g. de novo. If no identification has been performed at all then \"no database\" should be inserted followed by null. prefix: The prefix used in the “identifier” column of data tables. For the “no database” case \"null\" must be used. version: The database version is mandatory where identification has been performed. This may be a formal version number e.g. “1.4.1”, a date of access “2016-10-27” (ISO-8601 format) or “Unknown” if there is no suitable version that can be annotated. uri: The URI to the database. For the “no database” case, \"null\" must be reported. ")
  public List<Database> getDatabase() {
    return database;
  }

 /**
   * Set database.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	database[1]	[MIRIAM, MIR:00100079, HMDB, ]
MTD	database[1]-prefix	hmdb
MTD	database[1]-version	3.6
MTD	database[1]-uri	http://www.hmdb.ca/
MTD	database[2]	[,, "de novo", ]
MTD	database[2]-prefix	dn
MTD	database[2]-version	Unknown
MTD	database[2]-uri	null
MTD	database[3]	[,, "no database", null ]
MTD	database[3]-prefix	null
MTD	database[3]-version	Unknown
MTD	database[3]-uri	null
</code></pre>
   * 
   * 
   * @see #getDatabase Metadata#getDatabase for validation constraints
   * @param database a {@code List<Database>} parameter.
  **/
  public void setDatabase(List<Database> database) {
    this.database = database;
  }


 /**
   * Builder method for derivatizationAgent.
   *
   * @see Metadata#setDerivatizationAgent Metadata#setDerivatizationAgent for specification examples
   * @see Metadata#getDerivatizationAgent Metadata#getDerivatizationAgent for validation constraints
   * @param derivatizationAgent a {@code List<Parameter>} parameter.
   * @return Metadata
  **/
  public Metadata derivatizationAgent(List<Parameter> derivatizationAgent) {
   this.derivatizationAgent = derivatizationAgent;
   return this;
  }

  /**
   * Add a single derivatizationAgentItem to the derivatizationAgent collection.
   *
   * @see Metadata#getDerivatizationAgent Metadata#getDerivatizationAgent for validation constraints
   * @param derivatizationAgentItem a {@code Parameter} parameter.
   * @return Metadata
   */
  public Metadata addDerivatizationAgentItem(Parameter derivatizationAgentItem) {
    if (this.derivatizationAgent == null) {
      this.derivatizationAgent = new ArrayList<>();
    }
    this.derivatizationAgent.add(derivatizationAgentItem);
    return this;
  }

   /**
   * A description of derivatization agents applied to small molecules, using userParams or CV terms where possible.
   *
   * @return derivatizationAgent
  **/
  @Valid
  @ApiModelProperty(value = "A description of derivatization agents applied to small molecules, using userParams or CV terms where possible.")
  public List<Parameter> getDerivatizationAgent() {
    return derivatizationAgent;
  }

 /**
   * Set derivatizationAgent.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	derivatization_agent[1]	[XLMOD, XLMOD:07014, N-methyl-N-t-butyldimethylsilyltrifluoroacetamide, ]
</code></pre>
   * 
   * 
   * @see #getDerivatizationAgent Metadata#getDerivatizationAgent for validation constraints
   * @param derivatizationAgent a {@code List<Parameter>} parameter.
  **/
  public void setDerivatizationAgent(List<Parameter> derivatizationAgent) {
    this.derivatizationAgent = derivatizationAgent;
  }


 /**
   * Builder method for smallMoleculeQuantificationUnit.
   *
   * @see Metadata#setSmallMoleculeQuantificationUnit Metadata#setSmallMoleculeQuantificationUnit for specification examples
   * @see Metadata#getSmallMoleculeQuantificationUnit Metadata#getSmallMoleculeQuantificationUnit for validation constraints
   * @param smallMoleculeQuantificationUnit a {@code Parameter} parameter.
   * @return Metadata
  **/
  public Metadata smallMoleculeQuantificationUnit(Parameter smallMoleculeQuantificationUnit) {
   this.smallMoleculeQuantificationUnit = smallMoleculeQuantificationUnit;
   return this;
  }

   /**
   * Defines what type of units are reported in the small molecule summary quantification / abundance fields.
   *
   * @return smallMoleculeQuantificationUnit
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Defines what type of units are reported in the small molecule summary quantification / abundance fields.")
  public Parameter getSmallMoleculeQuantificationUnit() {
    return smallMoleculeQuantificationUnit;
  }

 /**
   * Set smallMoleculeQuantificationUnit.
   *
   * 
   * 
   * @see #getSmallMoleculeQuantificationUnit Metadata#getSmallMoleculeQuantificationUnit for validation constraints
   * @param smallMoleculeQuantificationUnit a {@code Parameter} parameter.
  **/
  public void setSmallMoleculeQuantificationUnit(Parameter smallMoleculeQuantificationUnit) {
    this.smallMoleculeQuantificationUnit = smallMoleculeQuantificationUnit;
  }


 /**
   * Builder method for smallMoleculeFeatureQuantificationUnit.
   *
   * @see Metadata#setSmallMoleculeFeatureQuantificationUnit Metadata#setSmallMoleculeFeatureQuantificationUnit for specification examples
   * @see Metadata#getSmallMoleculeFeatureQuantificationUnit Metadata#getSmallMoleculeFeatureQuantificationUnit for validation constraints
   * @param smallMoleculeFeatureQuantificationUnit a {@code Parameter} parameter.
   * @return Metadata
  **/
  public Metadata smallMoleculeFeatureQuantificationUnit(Parameter smallMoleculeFeatureQuantificationUnit) {
   this.smallMoleculeFeatureQuantificationUnit = smallMoleculeFeatureQuantificationUnit;
   return this;
  }

   /**
   * Defines what type of units are reported in the small molecule feature quantification / abundance fields.
   *
   * @return smallMoleculeFeatureQuantificationUnit
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "Defines what type of units are reported in the small molecule feature quantification / abundance fields.")
  public Parameter getSmallMoleculeFeatureQuantificationUnit() {
    return smallMoleculeFeatureQuantificationUnit;
  }

 /**
   * Set smallMoleculeFeatureQuantificationUnit.
   *
   * 
   * 
   * @see #getSmallMoleculeFeatureQuantificationUnit Metadata#getSmallMoleculeFeatureQuantificationUnit for validation constraints
   * @param smallMoleculeFeatureQuantificationUnit a {@code Parameter} parameter.
  **/
  public void setSmallMoleculeFeatureQuantificationUnit(Parameter smallMoleculeFeatureQuantificationUnit) {
    this.smallMoleculeFeatureQuantificationUnit = smallMoleculeFeatureQuantificationUnit;
  }


 /**
   * Builder method for smallMoleculeIdentificationReliability.
   *
   * @see Metadata#setSmallMoleculeIdentificationReliability Metadata#setSmallMoleculeIdentificationReliability for specification examples
   * @see Metadata#getSmallMoleculeIdentificationReliability Metadata#getSmallMoleculeIdentificationReliability for validation constraints
   * @param smallMoleculeIdentificationReliability a {@code Parameter} parameter.
   * @return Metadata
  **/
  public Metadata smallMoleculeIdentificationReliability(Parameter smallMoleculeIdentificationReliability) {
   this.smallMoleculeIdentificationReliability = smallMoleculeIdentificationReliability;
   return this;
  }

   /**
   * The system used for giving reliability / confidence codes to small molecule identifications MUST be specified if not using the default codes.
   *
   * @return smallMoleculeIdentificationReliability
  **/
  @Valid
  @ApiModelProperty(value = "The system used for giving reliability / confidence codes to small molecule identifications MUST be specified if not using the default codes.")
  public Parameter getSmallMoleculeIdentificationReliability() {
    return smallMoleculeIdentificationReliability;
  }

 /**
   * Set smallMoleculeIdentificationReliability.
   *
   * 
   * 
   * @see #getSmallMoleculeIdentificationReliability Metadata#getSmallMoleculeIdentificationReliability for validation constraints
   * @param smallMoleculeIdentificationReliability a {@code Parameter} parameter.
  **/
  public void setSmallMoleculeIdentificationReliability(Parameter smallMoleculeIdentificationReliability) {
    this.smallMoleculeIdentificationReliability = smallMoleculeIdentificationReliability;
  }


 /**
   * Builder method for idConfidenceMeasure.
   *
   * @see Metadata#setIdConfidenceMeasure Metadata#setIdConfidenceMeasure for specification examples
   * @see Metadata#getIdConfidenceMeasure Metadata#getIdConfidenceMeasure for validation constraints
   * @param idConfidenceMeasure a {@code List<Parameter>} parameter.
   * @return Metadata
  **/
  public Metadata idConfidenceMeasure(List<Parameter> idConfidenceMeasure) {
   this.idConfidenceMeasure = idConfidenceMeasure;
   return this;
  }

  /**
   * Add a single idConfidenceMeasureItem to the idConfidenceMeasure collection.
   *
   * @see Metadata#getIdConfidenceMeasure Metadata#getIdConfidenceMeasure for validation constraints
   * @param idConfidenceMeasureItem a {@code Parameter} parameter.
   * @return Metadata
   */
  public Metadata addIdConfidenceMeasureItem(Parameter idConfidenceMeasureItem) {
    this.idConfidenceMeasure.add(idConfidenceMeasureItem);
    return this;
  }

   /**
   * The type of small molecule confidence measures or scores MUST be reported as a CV parameter [1-n]. The CV parameter definition should formally state whether the ordering is high to low or vice versa. The order of the scores SHOULD reflect their importance for the identification and be used to determine the identification’s rank.
   *
   * @return idConfidenceMeasure
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The type of small molecule confidence measures or scores MUST be reported as a CV parameter [1-n]. The CV parameter definition should formally state whether the ordering is high to low or vice versa. The order of the scores SHOULD reflect their importance for the identification and be used to determine the identification’s rank.")
  public List<Parameter> getIdConfidenceMeasure() {
    return idConfidenceMeasure;
  }

 /**
   * Set idConfidenceMeasure.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>MTD	id_confidence_measure[1]	[MS,MS:1002889,Progenesis MetaScope Score,]
MTD	id_confidence_measure[2]	[MS,MS:1002890,fragmentation score,]
MTD	id_confidence_measure[3]	[MS,MS:1002891,isotopic fit score,]
</code></pre>
   * 
   * 
   * @see #getIdConfidenceMeasure Metadata#getIdConfidenceMeasure for validation constraints
   * @param idConfidenceMeasure a {@code List<Parameter>} parameter.
  **/
  public void setIdConfidenceMeasure(List<Parameter> idConfidenceMeasure) {
    this.idConfidenceMeasure = idConfidenceMeasure;
  }


 /**
   * Builder method for colunitSmallMolecule.
   *
   * @see Metadata#setColunitSmallMolecule Metadata#setColunitSmallMolecule for specification examples
   * @see Metadata#getColunitSmallMolecule Metadata#getColunitSmallMolecule for validation constraints
   * @param colunitSmallMolecule a {@code List<ColumnParameterMapping>} parameter.
   * @return Metadata
  **/
  public Metadata colunitSmallMolecule(List<ColumnParameterMapping> colunitSmallMolecule) {
   this.colunitSmallMolecule = colunitSmallMolecule;
   return this;
  }

  /**
   * Add a single colunitSmallMoleculeItem to the colunitSmallMolecule collection.
   *
   * @see Metadata#getColunitSmallMolecule Metadata#getColunitSmallMolecule for validation constraints
   * @param colunitSmallMoleculeItem a {@code ColumnParameterMapping} parameter.
   * @return Metadata
   */
  public Metadata addColunitSmallMoleculeItem(ColumnParameterMapping colunitSmallMoleculeItem) {
    if (this.colunitSmallMolecule == null) {
      this.colunitSmallMolecule = new ArrayList<>();
    }
    this.colunitSmallMolecule.add(colunitSmallMoleculeItem);
    return this;
  }

   /**
   * Defines the used unit for a column in the small molecule section. The format of the value has to be \{column name}&#x3D;\{Parameter defining the unit}. This field MUST NOT be used to define a unit for quantification columns. The unit used for small molecule quantification values MUST be set in small_molecule-quantification_unit.
   *
   * @return colunitSmallMolecule
  **/
  @Valid
  @ApiModelProperty(value = "Defines the used unit for a column in the small molecule section. The format of the value has to be \\{column name}=\\{Parameter defining the unit}. This field MUST NOT be used to define a unit for quantification columns. The unit used for small molecule quantification values MUST be set in small_molecule-quantification_unit.")
  public List<ColumnParameterMapping> getColunitSmallMolecule() {
    return colunitSmallMolecule;
  }

 /**
   * Set colunitSmallMolecule.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>COM	colunit for optional small molecule summary column with the name 'opt_global_cv_MS:MS:1002954_collisional_cross_sectional_area'
MTD	colunit-small_molecule	opt_global_cv_MS:MS:1002954_collisional_cross_sectional_area=[UO,UO:00003241, square angstrom,]
</code></pre>
   * 
   * 
   * @see #getColunitSmallMolecule Metadata#getColunitSmallMolecule for validation constraints
   * @param colunitSmallMolecule a {@code List<ColumnParameterMapping>} parameter.
  **/
  public void setColunitSmallMolecule(List<ColumnParameterMapping> colunitSmallMolecule) {
    this.colunitSmallMolecule = colunitSmallMolecule;
  }


 /**
   * Builder method for colunitSmallMoleculeFeature.
   *
   * @see Metadata#setColunitSmallMoleculeFeature Metadata#setColunitSmallMoleculeFeature for specification examples
   * @see Metadata#getColunitSmallMoleculeFeature Metadata#getColunitSmallMoleculeFeature for validation constraints
   * @param colunitSmallMoleculeFeature a {@code List<ColumnParameterMapping>} parameter.
   * @return Metadata
  **/
  public Metadata colunitSmallMoleculeFeature(List<ColumnParameterMapping> colunitSmallMoleculeFeature) {
   this.colunitSmallMoleculeFeature = colunitSmallMoleculeFeature;
   return this;
  }

  /**
   * Add a single colunitSmallMoleculeFeatureItem to the colunitSmallMoleculeFeature collection.
   *
   * @see Metadata#getColunitSmallMoleculeFeature Metadata#getColunitSmallMoleculeFeature for validation constraints
   * @param colunitSmallMoleculeFeatureItem a {@code ColumnParameterMapping} parameter.
   * @return Metadata
   */
  public Metadata addColunitSmallMoleculeFeatureItem(ColumnParameterMapping colunitSmallMoleculeFeatureItem) {
    if (this.colunitSmallMoleculeFeature == null) {
      this.colunitSmallMoleculeFeature = new ArrayList<>();
    }
    this.colunitSmallMoleculeFeature.add(colunitSmallMoleculeFeatureItem);
    return this;
  }

   /**
   * Defines the used unit for a column in the small molecule feature section. The format of the value has to be \{column name}&#x3D;\{Parameter defining the unit}. This field MUST NOT be used to define a unit for quantification columns. The unit used for small molecule quantification values MUST be set in small_molecule_feature-quantification_unit.
   *
   * @return colunitSmallMoleculeFeature
  **/
  @Valid
  @ApiModelProperty(value = "Defines the used unit for a column in the small molecule feature section. The format of the value has to be \\{column name}=\\{Parameter defining the unit}. This field MUST NOT be used to define a unit for quantification columns. The unit used for small molecule quantification values MUST be set in small_molecule_feature-quantification_unit.")
  public List<ColumnParameterMapping> getColunitSmallMoleculeFeature() {
    return colunitSmallMoleculeFeature;
  }

 /**
   * Set colunitSmallMoleculeFeature.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>COM	colunit for optional small molecule feature column with the name 'opt_ms_run[1]_cv_MS:MS:1002476_ion_mobility_drift_time' referencing ms_run[1]
MTD	colunit-small_molecule_feature	opt_ms_run[1]_cv_MS:MS:1002476_ion_mobility_drift_time=[UO,UO:0000031, minute,]
</code></pre>
   * 
   * 
   * @see #getColunitSmallMoleculeFeature Metadata#getColunitSmallMoleculeFeature for validation constraints
   * @param colunitSmallMoleculeFeature a {@code List<ColumnParameterMapping>} parameter.
  **/
  public void setColunitSmallMoleculeFeature(List<ColumnParameterMapping> colunitSmallMoleculeFeature) {
    this.colunitSmallMoleculeFeature = colunitSmallMoleculeFeature;
  }


 /**
   * Builder method for colunitSmallMoleculeEvidence.
   *
   * @see Metadata#setColunitSmallMoleculeEvidence Metadata#setColunitSmallMoleculeEvidence for specification examples
   * @see Metadata#getColunitSmallMoleculeEvidence Metadata#getColunitSmallMoleculeEvidence for validation constraints
   * @param colunitSmallMoleculeEvidence a {@code List<ColumnParameterMapping>} parameter.
   * @return Metadata
  **/
  public Metadata colunitSmallMoleculeEvidence(List<ColumnParameterMapping> colunitSmallMoleculeEvidence) {
   this.colunitSmallMoleculeEvidence = colunitSmallMoleculeEvidence;
   return this;
  }

  /**
   * Add a single colunitSmallMoleculeEvidenceItem to the colunitSmallMoleculeEvidence collection.
   *
   * @see Metadata#getColunitSmallMoleculeEvidence Metadata#getColunitSmallMoleculeEvidence for validation constraints
   * @param colunitSmallMoleculeEvidenceItem a {@code ColumnParameterMapping} parameter.
   * @return Metadata
   */
  public Metadata addColunitSmallMoleculeEvidenceItem(ColumnParameterMapping colunitSmallMoleculeEvidenceItem) {
    if (this.colunitSmallMoleculeEvidence == null) {
      this.colunitSmallMoleculeEvidence = new ArrayList<>();
    }
    this.colunitSmallMoleculeEvidence.add(colunitSmallMoleculeEvidenceItem);
    return this;
  }

   /**
   * Defines the used unit for a column in the small molecule evidence section. The format of the value has to be \{column name}&#x3D;\{Parameter defining the unit}.
   *
   * @return colunitSmallMoleculeEvidence
  **/
  @Valid
  @ApiModelProperty(value = "Defines the used unit for a column in the small molecule evidence section. The format of the value has to be \\{column name}=\\{Parameter defining the unit}.")
  public List<ColumnParameterMapping> getColunitSmallMoleculeEvidence() {
    return colunitSmallMoleculeEvidence;
  }

 /**
   * Set colunitSmallMoleculeEvidence.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>COM	colunit for optional small molecule evidence column with the name 'opt_global_mass_error'
MTD	colunit-small_molecule_evidence	opt_global_mass_error=[UO, UO:0000169, parts per million, ]
</code></pre>
   * 
   * 
   * @see #getColunitSmallMoleculeEvidence Metadata#getColunitSmallMoleculeEvidence for validation constraints
   * @param colunitSmallMoleculeEvidence a {@code List<ColumnParameterMapping>} parameter.
  **/
  public void setColunitSmallMoleculeEvidence(List<ColumnParameterMapping> colunitSmallMoleculeEvidence) {
    this.colunitSmallMoleculeEvidence = colunitSmallMoleculeEvidence;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metadata metadata = (Metadata) o;
    return Objects.equals(this.prefix, metadata.prefix) &&
        Objects.equals(this.mzTabVersion, metadata.mzTabVersion) &&
        Objects.equals(this.mzTabID, metadata.mzTabID) &&
        Objects.equals(this.title, metadata.title) &&
        Objects.equals(this.description, metadata.description) &&
        Objects.equals(this.sampleProcessing, metadata.sampleProcessing) &&
        Objects.equals(this.instrument, metadata.instrument) &&
        Objects.equals(this.software, metadata.software) &&
        Objects.equals(this.publication, metadata.publication) &&
        Objects.equals(this.contact, metadata.contact) &&
        Objects.equals(this.uri, metadata.uri) &&
        Objects.equals(this.externalStudyUri, metadata.externalStudyUri) &&
        Objects.equals(this.quantificationMethod, metadata.quantificationMethod) &&
        Objects.equals(this.studyVariable, metadata.studyVariable) &&
        Objects.equals(this.msRun, metadata.msRun) &&
        Objects.equals(this.assay, metadata.assay) &&
        Objects.equals(this.sample, metadata.sample) &&
        Objects.equals(this.custom, metadata.custom) &&
        Objects.equals(this.cv, metadata.cv) &&
        Objects.equals(this.database, metadata.database) &&
        Objects.equals(this.derivatizationAgent, metadata.derivatizationAgent) &&
        Objects.equals(this.smallMoleculeQuantificationUnit, metadata.smallMoleculeQuantificationUnit) &&
        Objects.equals(this.smallMoleculeFeatureQuantificationUnit, metadata.smallMoleculeFeatureQuantificationUnit) &&
        Objects.equals(this.smallMoleculeIdentificationReliability, metadata.smallMoleculeIdentificationReliability) &&
        Objects.equals(this.idConfidenceMeasure, metadata.idConfidenceMeasure) &&
        Objects.equals(this.colunitSmallMolecule, metadata.colunitSmallMolecule) &&
        Objects.equals(this.colunitSmallMoleculeFeature, metadata.colunitSmallMoleculeFeature) &&
        Objects.equals(this.colunitSmallMoleculeEvidence, metadata.colunitSmallMoleculeEvidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, mzTabVersion, mzTabID, title, description, sampleProcessing, instrument, software, publication, contact, uri, externalStudyUri, quantificationMethod, studyVariable, msRun, assay, sample, custom, cv, database, derivatizationAgent, smallMoleculeQuantificationUnit, smallMoleculeFeatureQuantificationUnit, smallMoleculeIdentificationReliability, idConfidenceMeasure, colunitSmallMolecule, colunitSmallMoleculeFeature, colunitSmallMoleculeEvidence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metadata {\n");
    
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    mzTabVersion: ").append(toIndentedString(mzTabVersion)).append("\n");
    sb.append("    mzTabID: ").append(toIndentedString(mzTabID)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sampleProcessing: ").append(toIndentedString(sampleProcessing)).append("\n");
    sb.append("    instrument: ").append(toIndentedString(instrument)).append("\n");
    sb.append("    software: ").append(toIndentedString(software)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    externalStudyUri: ").append(toIndentedString(externalStudyUri)).append("\n");
    sb.append("    quantificationMethod: ").append(toIndentedString(quantificationMethod)).append("\n");
    sb.append("    studyVariable: ").append(toIndentedString(studyVariable)).append("\n");
    sb.append("    msRun: ").append(toIndentedString(msRun)).append("\n");
    sb.append("    assay: ").append(toIndentedString(assay)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    cv: ").append(toIndentedString(cv)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    derivatizationAgent: ").append(toIndentedString(derivatizationAgent)).append("\n");
    sb.append("    smallMoleculeQuantificationUnit: ").append(toIndentedString(smallMoleculeQuantificationUnit)).append("\n");
    sb.append("    smallMoleculeFeatureQuantificationUnit: ").append(toIndentedString(smallMoleculeFeatureQuantificationUnit)).append("\n");
    sb.append("    smallMoleculeIdentificationReliability: ").append(toIndentedString(smallMoleculeIdentificationReliability)).append("\n");
    sb.append("    idConfidenceMeasure: ").append(toIndentedString(idConfidenceMeasure)).append("\n");
    sb.append("    colunitSmallMolecule: ").append(toIndentedString(colunitSmallMolecule)).append("\n");
    sb.append("    colunitSmallMoleculeFeature: ").append(toIndentedString(colunitSmallMoleculeFeature)).append("\n");
    sb.append("    colunitSmallMoleculeEvidence: ").append(toIndentedString(colunitSmallMoleculeEvidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

