/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.Comment;
import de.isas.mztab2.model.OptColumnMapping;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * The small molecule feature section is table-based, representing individual MS regions (generally considered to be the elution profile for all isotopomers formed from a single charge state of a molecule), that have been measured/quantified. However, for approaches that quantify individual isotopomers e.g. stable isotope labelling/flux studies, then each SMF row SHOULD represent a single isotopomer.

Different adducts or derivatives and different charge states of individual molecules should be reported as separate SMF rows.

The small molecule feature section MUST always come after the Small Molecule Table. All table columns MUST be Tab separated. There MUST NOT be any empty cells. Missing values MUST be reported using “null”.

The order of columns MUST follow the order specified below.

All columns are MANDATORY except for “opt_” columns.

 * 
 *
 * 
 *
 */
@ApiModel(description = "The small molecule feature section is table-based, representing individual MS regions (generally considered to be the elution profile for all isotopomers formed from a single charge state of a molecule), that have been measured/quantified. However, for approaches that quantify individual isotopomers e.g. stable isotope labelling/flux studies, then each SMF row SHOULD represent a single isotopomer.  Different adducts or derivatives and different charge states of individual molecules should be reported as separate SMF rows.  The small molecule feature section MUST always come after the Small Molecule Table. All table columns MUST be Tab separated. There MUST NOT be any empty cells. Missing values MUST be reported using “null”.  The order of columns MUST follow the order specified below.  All columns are MANDATORY except for “opt_” columns. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "SmallMoleculeFeature")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "SmallMoleculeFeature")
public class SmallMoleculeFeature {

  /**
   * Property enumeration for SmallMoleculeFeature.
   */
  public static enum Properties {
      prefix("prefix"), 
      headerPrefix("header_prefix"), 
      smfId("smf_id"), 
      smeIdRefs("sme_id_refs"), 
      smeIdRefAmbiguityCode("sme_id_ref_ambiguity_code"), 
      adductIon("adduct_ion"), 
      isotopomer("isotopomer"), 
      expMassToCharge("exp_mass_to_charge"), 
      charge("charge"), 
      retentionTimeInSeconds("retention_time_in_seconds"), 
      retentionTimeInSecondsStart("retention_time_in_seconds_start"), 
      retentionTimeInSecondsEnd("retention_time_in_seconds_end"), 
      abundanceAssay("abundance_assay"), 
      opt("opt"), 
      comment("comment");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  /**
   * The small molecule feature table row prefix. SMF MUST be used for rows of the small molecule feature table.
   */
  public enum PrefixEnum {
    SMF("SMF");

    private String value;

    PrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrefixEnum fromValue(String text) {
      for (PrefixEnum b : PrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private PrefixEnum prefix = PrefixEnum.SMF;
  /**
   * The small molecule feature table header prefix. SFH MUST be used for the small molecule feature table header line (the column labels).
   */
  public enum HeaderPrefixEnum {
    SFH("SFH");

    private String value;

    HeaderPrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HeaderPrefixEnum fromValue(String text) {
      for (HeaderPrefixEnum b : HeaderPrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("header_prefix")
  @JacksonXmlProperty(localName = "header_prefix")
  @XmlElement(name = "header_prefix")
  private HeaderPrefixEnum headerPrefix = HeaderPrefixEnum.SFH;
  @JsonProperty("smf_id")
  @JacksonXmlProperty(localName = "smf_id")
  @XmlElement(name = "smf_id")
  private Integer smfId = null;
  @JsonProperty("sme_id_refs")
  // Is a container wrapped=false
  // items.name=smeIdRefs items.baseName=smeIdRefs items.xmlName= items.xmlNamespace=
  // items.example= items.type=Integer
  @XmlElement(name = "smeIdRefs")
  private List<Integer> smeIdRefs = null;
  @JsonProperty("sme_id_ref_ambiguity_code")
  @JacksonXmlProperty(localName = "sme_id_ref_ambiguity_code")
  @XmlElement(name = "sme_id_ref_ambiguity_code")
  private Integer smeIdRefAmbiguityCode = null;
  @JsonProperty("adduct_ion")
  @JacksonXmlProperty(localName = "adduct_ion")
  @XmlElement(name = "adduct_ion")
  private String adductIon = null;
  @JsonProperty("isotopomer")
  @JacksonXmlProperty(localName = "isotopomer")
  @XmlElement(name = "isotopomer")
  private Parameter isotopomer = null;
  @JsonProperty("exp_mass_to_charge")
  @JacksonXmlProperty(localName = "exp_mass_to_charge")
  @XmlElement(name = "exp_mass_to_charge")
  private Double expMassToCharge = null;
  @JsonProperty("charge")
  @JacksonXmlProperty(localName = "charge")
  @XmlElement(name = "charge")
  private Integer charge = null;
  @JsonProperty("retention_time_in_seconds")
  @JacksonXmlProperty(localName = "retention_time_in_seconds")
  @XmlElement(name = "retention_time_in_seconds")
  private Double retentionTimeInSeconds = null;
  @JsonProperty("retention_time_in_seconds_start")
  @JacksonXmlProperty(localName = "retention_time_in_seconds_start")
  @XmlElement(name = "retention_time_in_seconds_start")
  private Double retentionTimeInSecondsStart = null;
  @JsonProperty("retention_time_in_seconds_end")
  @JacksonXmlProperty(localName = "retention_time_in_seconds_end")
  @XmlElement(name = "retention_time_in_seconds_end")
  private Double retentionTimeInSecondsEnd = null;
  @JsonProperty("abundance_assay")
  // Is a container wrapped=false
  // items.name=abundanceAssay items.baseName=abundanceAssay items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceAssay")
  private List<Double> abundanceAssay = null;
  @JsonProperty("opt")
  // Is a container wrapped=false
  // items.name=opt items.baseName=opt items.xmlName= items.xmlNamespace=
  // items.example= items.type=OptColumnMapping
  @XmlElement(name = "opt")
  private List<OptColumnMapping> opt = null;
  @JsonProperty("comment")
  // Is a container wrapped=false
  // items.name=comment items.baseName=comment items.xmlName= items.xmlNamespace=
  // items.example= items.type=Comment
  @XmlElement(name = "comment")
  private List<Comment> comment = null;
   /**
   * The small molecule feature table row prefix. SMF MUST be used for rows of the small molecule feature table.
   *
   * @return prefix
  **/
  @ApiModelProperty(value = "The small molecule feature table row prefix. SMF MUST be used for rows of the small molecule feature table.")
  public PrefixEnum getPrefix() {
    return prefix;
  }

   /**
   * The small molecule feature table header prefix. SFH MUST be used for the small molecule feature table header line (the column labels).
   *
   * @return headerPrefix
  **/
  @ApiModelProperty(value = "The small molecule feature table header prefix. SFH MUST be used for the small molecule feature table header line (the column labels).")
  public HeaderPrefixEnum getHeaderPrefix() {
    return headerPrefix;
  }


 /**
   * Builder method for smfId.
   *
   * @see SmallMoleculeFeature#setSmfId SmallMoleculeFeature#setSmfId for specification examples
   * @see SmallMoleculeFeature#getSmfId SmallMoleculeFeature#getSmfId for validation constraints
   * @param smfId a {@code Integer} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature smfId(Integer smfId) {
   this.smfId = smfId;
   return this;
  }

   /**
   * A within file unique identifier for the small molecule feature.
   *
   * @return smfId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "A within file unique identifier for the small molecule feature.")
  public Integer getSmfId() {
    return smfId;
  }

 /**
   * Set smfId.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…
SMF	1	…
SMF	2	…
</code></pre>
   * 
   * 
   * @see #getSmfId SmallMoleculeFeature#getSmfId for validation constraints
   * @param smfId a {@code Integer} parameter.
  **/
  public void setSmfId(Integer smfId) {
    this.smfId = smfId;
  }


 /**
   * Builder method for smeIdRefs.
   *
   * @see SmallMoleculeFeature#setSmeIdRefs SmallMoleculeFeature#setSmeIdRefs for specification examples
   * @see SmallMoleculeFeature#getSmeIdRefs SmallMoleculeFeature#getSmeIdRefs for validation constraints
   * @param smeIdRefs a {@code List<Integer>} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature smeIdRefs(List<Integer> smeIdRefs) {
   this.smeIdRefs = smeIdRefs;
   return this;
  }

  /**
   * Add a single smeIdRefsItem to the smeIdRefs collection.
   *
   * @see SmallMoleculeFeature#getSmeIdRefs SmallMoleculeFeature#getSmeIdRefs for validation constraints
   * @param smeIdRefsItem a {@code Integer} parameter.
   * @return SmallMoleculeFeature
   */
  public SmallMoleculeFeature addSmeIdRefsItem(Integer smeIdRefsItem) {
    if (this.smeIdRefs == null) {
      this.smeIdRefs = new ArrayList<>();
    }
    this.smeIdRefs.add(smeIdRefsItem);
    return this;
  }

   /**
   * References to the identification evidence (SME elements) via referencing SME_ID values. Multiple values MAY be provided as a “|” separated list to indicate ambiguity in the identification or to indicate that different types of data supported the identifiction (see SME_ID_REF_ambiguity_code). For the case of a consensus approach where multiple adduct forms are used to infer the SML ID, different features should just reference the same SME_ID value(s).
   *
   * @return smeIdRefs
  **/
  @ApiModelProperty(value = "References to the identification evidence (SME elements) via referencing SME_ID values. Multiple values MAY be provided as a “|” separated list to indicate ambiguity in the identification or to indicate that different types of data supported the identifiction (see SME_ID_REF_ambiguity_code). For the case of a consensus approach where multiple adduct forms are used to infer the SML ID, different features should just reference the same SME_ID value(s).")
  public List<Integer> getSmeIdRefs() {
    return smeIdRefs;
  }

 /**
   * Set smeIdRefs.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	SME_ID_REFS
SMF	1	5|6|12…
</code></pre>
   * 
   * 
   * @see #getSmeIdRefs SmallMoleculeFeature#getSmeIdRefs for validation constraints
   * @param smeIdRefs a {@code List<Integer>} parameter.
  **/
  public void setSmeIdRefs(List<Integer> smeIdRefs) {
    this.smeIdRefs = smeIdRefs;
  }


 /**
   * Builder method for smeIdRefAmbiguityCode.
   *
   * @see SmallMoleculeFeature#setSmeIdRefAmbiguityCode SmallMoleculeFeature#setSmeIdRefAmbiguityCode for specification examples
   * @see SmallMoleculeFeature#getSmeIdRefAmbiguityCode SmallMoleculeFeature#getSmeIdRefAmbiguityCode for validation constraints
   * @param smeIdRefAmbiguityCode a {@code Integer} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature smeIdRefAmbiguityCode(Integer smeIdRefAmbiguityCode) {
   this.smeIdRefAmbiguityCode = smeIdRefAmbiguityCode;
   return this;
  }

   /**
   * If multiple values are given under SME_ID_REFS, one of the following codes MUST be provided. 1&#x3D;Ambiguous identification; 2&#x3D;Only different evidence streams for the same molecule with no ambiguity; 3&#x3D;Both ambiguous identification and multiple evidence streams. If there are no or one value under SME_ID_REFs, this MUST be reported as null.
   *
   * @return smeIdRefAmbiguityCode
  **/
  @ApiModelProperty(value = "If multiple values are given under SME_ID_REFS, one of the following codes MUST be provided. 1=Ambiguous identification; 2=Only different evidence streams for the same molecule with no ambiguity; 3=Both ambiguous identification and multiple evidence streams. If there are no or one value under SME_ID_REFs, this MUST be reported as null.")
  public Integer getSmeIdRefAmbiguityCode() {
    return smeIdRefAmbiguityCode;
  }

 /**
   * Set smeIdRefAmbiguityCode.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	SME_ID_REFS	SME_ID_REF_ambiguity_code
SMF	1	5|6|12…	1
</code></pre>
   * 
   * 
   * @see #getSmeIdRefAmbiguityCode SmallMoleculeFeature#getSmeIdRefAmbiguityCode for validation constraints
   * @param smeIdRefAmbiguityCode a {@code Integer} parameter.
  **/
  public void setSmeIdRefAmbiguityCode(Integer smeIdRefAmbiguityCode) {
    this.smeIdRefAmbiguityCode = smeIdRefAmbiguityCode;
  }


 /**
   * Builder method for adductIon.
   *
   * @see SmallMoleculeFeature#setAdductIon SmallMoleculeFeature#setAdductIon for specification examples
   * @see SmallMoleculeFeature#getAdductIon SmallMoleculeFeature#getAdductIon for validation constraints
   * @param adductIon a {@code String} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature adductIon(String adductIon) {
   this.adductIon = adductIon;
   return this;
  }

   /**
   * The assumed classification of this molecule’s adduct ion after detection, following the general style in the 2013 IUPAC recommendations on terms relating to MS e.g. [M+H]1+, [M+Na]1+, [M+NH4]1+, [M-H]1-, [M+Cl]1-, [M+H]1+.
   *
   * @return adductIon
  **/
 @Pattern(regexp="^\\[\\d*M([+-][\\w]*)\\]\\d*[+-]$")  @ApiModelProperty(value = "The assumed classification of this molecule’s adduct ion after detection, following the general style in the 2013 IUPAC recommendations on terms relating to MS e.g. [M+H]1+, [M+Na]1+, [M+NH4]1+, [M-H]1-, [M+Cl]1-, [M+H]1+.")
  public String getAdductIon() {
    return adductIon;
  }

 /**
   * Set adductIon.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	adduct_ion	…
SMF	1	…	[M+H]+	…
SMF	2	…	[M+2Na]2+	…
</code></pre>
   * 
   * 
   * @see #getAdductIon SmallMoleculeFeature#getAdductIon for validation constraints
   * @param adductIon a {@code String} parameter.
  **/
  public void setAdductIon(String adductIon) {
    this.adductIon = adductIon;
  }


 /**
   * Builder method for isotopomer.
   *
   * @see SmallMoleculeFeature#setIsotopomer SmallMoleculeFeature#setIsotopomer for specification examples
   * @see SmallMoleculeFeature#getIsotopomer SmallMoleculeFeature#getIsotopomer for validation constraints
   * @param isotopomer a {@code Parameter} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature isotopomer(Parameter isotopomer) {
   this.isotopomer = isotopomer;
   return this;
  }

   /**
   * If de-isotoping has not been performed, then the isotopomer quantified MUST be reported here e.g. “+1”, “+2”, “13C peak” using CV terms, otherwise (i.e. for approaches where SMF rows are de-isotoped features) this MUST be null.
   *
   * @return isotopomer
  **/
  @Valid
  @ApiModelProperty(value = "If de-isotoping has not been performed, then the isotopomer quantified MUST be reported here e.g. “+1”, “+2”, “13C peak” using CV terms, otherwise (i.e. for approaches where SMF rows are de-isotoped features) this MUST be null.")
  public Parameter getIsotopomer() {
    return isotopomer;
  }

 /**
   * Set isotopomer.
   *
   * 
   * 
   * @see #getIsotopomer SmallMoleculeFeature#getIsotopomer for validation constraints
   * @param isotopomer a {@code Parameter} parameter.
  **/
  public void setIsotopomer(Parameter isotopomer) {
    this.isotopomer = isotopomer;
  }


 /**
   * Builder method for expMassToCharge.
   *
   * @see SmallMoleculeFeature#setExpMassToCharge SmallMoleculeFeature#setExpMassToCharge for specification examples
   * @see SmallMoleculeFeature#getExpMassToCharge SmallMoleculeFeature#getExpMassToCharge for validation constraints
   * @param expMassToCharge a {@code Double} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature expMassToCharge(Double expMassToCharge) {
   this.expMassToCharge = expMassToCharge;
   return this;
  }

   /**
   * The experimental mass/charge value for the feature, by default assumed to be the mean across assays or a representative value. For approaches that report isotopomers as SMF rows, then the m/z of the isotopomer MUST be reported here.
   *
   * @return expMassToCharge
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The experimental mass/charge value for the feature, by default assumed to be the mean across assays or a representative value. For approaches that report isotopomers as SMF rows, then the m/z of the isotopomer MUST be reported here.")
  public Double getExpMassToCharge() {
    return expMassToCharge;
  }

 /**
   * Set expMassToCharge.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	exp_mass_to_charge	…
SMF	1	…	1234.5	…
</code></pre>
   * 
   * 
   * @see #getExpMassToCharge SmallMoleculeFeature#getExpMassToCharge for validation constraints
   * @param expMassToCharge a {@code Double} parameter.
  **/
  public void setExpMassToCharge(Double expMassToCharge) {
    this.expMassToCharge = expMassToCharge;
  }


 /**
   * Builder method for charge.
   *
   * @see SmallMoleculeFeature#setCharge SmallMoleculeFeature#setCharge for specification examples
   * @see SmallMoleculeFeature#getCharge SmallMoleculeFeature#getCharge for validation constraints
   * @param charge a {@code Integer} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature charge(Integer charge) {
   this.charge = charge;
   return this;
  }

   /**
   * The feature’s charge value using positive integers both for positive and negative polarity modes.
   *
   * @return charge
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The feature’s charge value using positive integers both for positive and negative polarity modes.")
  public Integer getCharge() {
    return charge;
  }

 /**
   * Set charge.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	charge	…
SMF	1	…	1	…
</code></pre>
   * 
   * 
   * @see #getCharge SmallMoleculeFeature#getCharge for validation constraints
   * @param charge a {@code Integer} parameter.
  **/
  public void setCharge(Integer charge) {
    this.charge = charge;
  }


 /**
   * Builder method for retentionTimeInSeconds.
   *
   * @see SmallMoleculeFeature#setRetentionTimeInSeconds SmallMoleculeFeature#setRetentionTimeInSeconds for specification examples
   * @see SmallMoleculeFeature#getRetentionTimeInSeconds SmallMoleculeFeature#getRetentionTimeInSeconds for validation constraints
   * @param retentionTimeInSeconds a {@code Double} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature retentionTimeInSeconds(Double retentionTimeInSeconds) {
   this.retentionTimeInSeconds = retentionTimeInSeconds;
   return this;
  }

   /**
   * The apex of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time values for individual MS runs (i.e. before alignment) MAY be reported as optional columns. Retention time SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown. Relative retention time or retention time index values MAY be reported as optional columns, and could be considered for inclusion in future versions of mzTab as appropriate.
   *
   * @return retentionTimeInSeconds
  **/
  @ApiModelProperty(value = "The apex of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time values for individual MS runs (i.e. before alignment) MAY be reported as optional columns. Retention time SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown. Relative retention time or retention time index values MAY be reported as optional columns, and could be considered for inclusion in future versions of mzTab as appropriate.")
  public Double getRetentionTimeInSeconds() {
    return retentionTimeInSeconds;
  }

 /**
   * Set retentionTimeInSeconds.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	retention_time_in_seconds	…
SMF	1	…	1345.7	…
</code></pre>
   * 
   * 
   * @see #getRetentionTimeInSeconds SmallMoleculeFeature#getRetentionTimeInSeconds for validation constraints
   * @param retentionTimeInSeconds a {@code Double} parameter.
  **/
  public void setRetentionTimeInSeconds(Double retentionTimeInSeconds) {
    this.retentionTimeInSeconds = retentionTimeInSeconds;
  }


 /**
   * Builder method for retentionTimeInSecondsStart.
   *
   * @see SmallMoleculeFeature#setRetentionTimeInSecondsStart SmallMoleculeFeature#setRetentionTimeInSecondsStart for specification examples
   * @see SmallMoleculeFeature#getRetentionTimeInSecondsStart SmallMoleculeFeature#getRetentionTimeInSecondsStart for validation constraints
   * @param retentionTimeInSecondsStart a {@code Double} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature retentionTimeInSecondsStart(Double retentionTimeInSecondsStart) {
   this.retentionTimeInSecondsStart = retentionTimeInSecondsStart;
   return this;
  }

   /**
   * The start time of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time start and end SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown and MAY be reported in optional columns.
   *
   * @return retentionTimeInSecondsStart
  **/
  @ApiModelProperty(value = "The start time of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time start and end SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown and MAY be reported in optional columns.")
  public Double getRetentionTimeInSecondsStart() {
    return retentionTimeInSecondsStart;
  }

 /**
   * Set retentionTimeInSecondsStart.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	retention_time_in_seconds_start	…
SMF	1	…	1327.0	…
</code></pre>
   * 
   * 
   * @see #getRetentionTimeInSecondsStart SmallMoleculeFeature#getRetentionTimeInSecondsStart for validation constraints
   * @param retentionTimeInSecondsStart a {@code Double} parameter.
  **/
  public void setRetentionTimeInSecondsStart(Double retentionTimeInSecondsStart) {
    this.retentionTimeInSecondsStart = retentionTimeInSecondsStart;
  }


 /**
   * Builder method for retentionTimeInSecondsEnd.
   *
   * @see SmallMoleculeFeature#setRetentionTimeInSecondsEnd SmallMoleculeFeature#setRetentionTimeInSecondsEnd for specification examples
   * @see SmallMoleculeFeature#getRetentionTimeInSecondsEnd SmallMoleculeFeature#getRetentionTimeInSecondsEnd for validation constraints
   * @param retentionTimeInSecondsEnd a {@code Double} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature retentionTimeInSecondsEnd(Double retentionTimeInSecondsEnd) {
   this.retentionTimeInSecondsEnd = retentionTimeInSecondsEnd;
   return this;
  }

   /**
   * The end time of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time start and end SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown and MAY be reported in optional columns..
   *
   * @return retentionTimeInSecondsEnd
  **/
  @ApiModelProperty(value = "The end time of the feature on the retention time axis, in a Master or aggregate MS run. Retention time MUST be reported in seconds. Retention time start and end SHOULD only be null in the case of direct infusion MS or other techniques where a retention time value is absent or unknown and MAY be reported in optional columns..")
  public Double getRetentionTimeInSecondsEnd() {
    return retentionTimeInSecondsEnd;
  }

 /**
   * Set retentionTimeInSecondsEnd.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	retention_time_in_seconds_end	…
SMF	1	…	1327.8	…
</code></pre>
   * 
   * 
   * @see #getRetentionTimeInSecondsEnd SmallMoleculeFeature#getRetentionTimeInSecondsEnd for validation constraints
   * @param retentionTimeInSecondsEnd a {@code Double} parameter.
  **/
  public void setRetentionTimeInSecondsEnd(Double retentionTimeInSecondsEnd) {
    this.retentionTimeInSecondsEnd = retentionTimeInSecondsEnd;
  }


 /**
   * Builder method for abundanceAssay.
   *
   * @see SmallMoleculeFeature#setAbundanceAssay SmallMoleculeFeature#setAbundanceAssay for specification examples
   * @see SmallMoleculeFeature#getAbundanceAssay SmallMoleculeFeature#getAbundanceAssay for validation constraints
   * @param abundanceAssay a {@code List<Double>} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature abundanceAssay(List<Double> abundanceAssay) {
   this.abundanceAssay = abundanceAssay;
   return this;
  }

  /**
   * Add a single abundanceAssayItem to the abundanceAssay collection.
   *
   * @see SmallMoleculeFeature#getAbundanceAssay SmallMoleculeFeature#getAbundanceAssay for validation constraints
   * @param abundanceAssayItem a {@code Double} parameter.
   * @return SmallMoleculeFeature
   */
  public SmallMoleculeFeature addAbundanceAssayItem(Double abundanceAssayItem) {
    if (this.abundanceAssay == null) {
      this.abundanceAssay = new ArrayList<>();
    }
    this.abundanceAssay.add(abundanceAssayItem);
    return this;
  }

   /**
   * The feature’s abundance in every assay described in the metadata section MUST be reported. Null or zero values may be reported as appropriate.
   *
   * @return abundanceAssay
  **/
  @ApiModelProperty(value = "The feature’s abundance in every assay described in the metadata section MUST be reported. Null or zero values may be reported as appropriate.")
  public List<Double> getAbundanceAssay() {
    return abundanceAssay;
  }

 /**
   * Set abundanceAssay.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	abundance_assay[1]	…
SMF	1	…	38648	…
</code></pre>
   * 
   * 
   * @see #getAbundanceAssay SmallMoleculeFeature#getAbundanceAssay for validation constraints
   * @param abundanceAssay a {@code List<Double>} parameter.
  **/
  public void setAbundanceAssay(List<Double> abundanceAssay) {
    this.abundanceAssay = abundanceAssay;
  }


 /**
   * Builder method for opt.
   *
   * @see SmallMoleculeFeature#setOpt SmallMoleculeFeature#setOpt for specification examples
   * @see SmallMoleculeFeature#getOpt SmallMoleculeFeature#getOpt for validation constraints
   * @param opt a {@code List<OptColumnMapping>} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature opt(List<OptColumnMapping> opt) {
   this.opt = opt;
   return this;
  }

  /**
   * Add a single optItem to the opt collection.
   *
   * @see SmallMoleculeFeature#getOpt SmallMoleculeFeature#getOpt for validation constraints
   * @param optItem a {@code OptColumnMapping} parameter.
   * @return SmallMoleculeFeature
   */
  public SmallMoleculeFeature addOptItem(OptColumnMapping optItem) {
    if (this.opt == null) {
      this.opt = new ArrayList<>();
    }
    this.opt.add(optItem);
    return this;
  }

   /**
   * Additional columns can be added to the end of the small molecule feature table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’.

   *
   * @return opt
  **/
  @Valid
  @ApiModelProperty(value = "Additional columns can be added to the end of the small molecule feature table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’. ")
  public List<OptColumnMapping> getOpt() {
    return opt;
  }

 /**
   * Set opt.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SFH	SMF_ID	…	opt_assay[1]_my_value	…	opt_global_another_value
SMF	1	…	My value	…	some other value
</code></pre>
   * 
   * 
   * @see #getOpt SmallMoleculeFeature#getOpt for validation constraints
   * @param opt a {@code List<OptColumnMapping>} parameter.
  **/
  public void setOpt(List<OptColumnMapping> opt) {
    this.opt = opt;
  }


 /**
   * Builder method for comment.
   *
   * @see SmallMoleculeFeature#setComment SmallMoleculeFeature#setComment for specification examples
   * @see SmallMoleculeFeature#getComment SmallMoleculeFeature#getComment for validation constraints
   * @param comment a {@code List<Comment>} parameter.
   * @return SmallMoleculeFeature
  **/
  public SmallMoleculeFeature comment(List<Comment> comment) {
   this.comment = comment;
   return this;
  }

  /**
   * Add a single commentItem to the comment collection.
   *
   * @see SmallMoleculeFeature#getComment SmallMoleculeFeature#getComment for validation constraints
   * @param commentItem a {@code Comment} parameter.
   * @return SmallMoleculeFeature
   */
  public SmallMoleculeFeature addCommentItem(Comment commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * <p>Get comment.</p>
   *
   * @return comment
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Comment> getComment() {
    return comment;
  }

 /**
   * Set comment.
   *
   * 
   * 
   * @see #getComment SmallMoleculeFeature#getComment for validation constraints
   * @param comment a {@code List<Comment>} parameter.
  **/
  public void setComment(List<Comment> comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmallMoleculeFeature smallMoleculeFeature = (SmallMoleculeFeature) o;
    return Objects.equals(this.prefix, smallMoleculeFeature.prefix) &&
        Objects.equals(this.headerPrefix, smallMoleculeFeature.headerPrefix) &&
        Objects.equals(this.smfId, smallMoleculeFeature.smfId) &&
        Objects.equals(this.smeIdRefs, smallMoleculeFeature.smeIdRefs) &&
        Objects.equals(this.smeIdRefAmbiguityCode, smallMoleculeFeature.smeIdRefAmbiguityCode) &&
        Objects.equals(this.adductIon, smallMoleculeFeature.adductIon) &&
        Objects.equals(this.isotopomer, smallMoleculeFeature.isotopomer) &&
        Objects.equals(this.expMassToCharge, smallMoleculeFeature.expMassToCharge) &&
        Objects.equals(this.charge, smallMoleculeFeature.charge) &&
        Objects.equals(this.retentionTimeInSeconds, smallMoleculeFeature.retentionTimeInSeconds) &&
        Objects.equals(this.retentionTimeInSecondsStart, smallMoleculeFeature.retentionTimeInSecondsStart) &&
        Objects.equals(this.retentionTimeInSecondsEnd, smallMoleculeFeature.retentionTimeInSecondsEnd) &&
        Objects.equals(this.abundanceAssay, smallMoleculeFeature.abundanceAssay) &&
        Objects.equals(this.opt, smallMoleculeFeature.opt) &&
        Objects.equals(this.comment, smallMoleculeFeature.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, headerPrefix, smfId, smeIdRefs, smeIdRefAmbiguityCode, adductIon, isotopomer, expMassToCharge, charge, retentionTimeInSeconds, retentionTimeInSecondsStart, retentionTimeInSecondsEnd, abundanceAssay, opt, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmallMoleculeFeature {\n");
    
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    headerPrefix: ").append(toIndentedString(headerPrefix)).append("\n");
    sb.append("    smfId: ").append(toIndentedString(smfId)).append("\n");
    sb.append("    smeIdRefs: ").append(toIndentedString(smeIdRefs)).append("\n");
    sb.append("    smeIdRefAmbiguityCode: ").append(toIndentedString(smeIdRefAmbiguityCode)).append("\n");
    sb.append("    adductIon: ").append(toIndentedString(adductIon)).append("\n");
    sb.append("    isotopomer: ").append(toIndentedString(isotopomer)).append("\n");
    sb.append("    expMassToCharge: ").append(toIndentedString(expMassToCharge)).append("\n");
    sb.append("    charge: ").append(toIndentedString(charge)).append("\n");
    sb.append("    retentionTimeInSeconds: ").append(toIndentedString(retentionTimeInSeconds)).append("\n");
    sb.append("    retentionTimeInSecondsStart: ").append(toIndentedString(retentionTimeInSecondsStart)).append("\n");
    sb.append("    retentionTimeInSecondsEnd: ").append(toIndentedString(retentionTimeInSecondsEnd)).append("\n");
    sb.append("    abundanceAssay: ").append(toIndentedString(abundanceAssay)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

