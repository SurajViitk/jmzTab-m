/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * Specification of databases.
(empty): The description of databases used. For cases, where a known database has not been used for identification, a userParam SHOULD be inserted to describe any identification performed e.g. de novo. If no identification has been performed at all then "no database" should be inserted followed by null.
prefix: The prefix used in the “identifier” column of data tables. For the “no database” case "null" must be used.
version: The database version is mandatory where identification has been performed. This may be a formal version number e.g. “1.4.1”, a date of access “2016-10-27” (ISO-8601 format) or “Unknown” if there is no suitable version that can be annotated.
uri: The URI to the database. For the “no database” case, "null" must be reported.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	database[1]	[MIRIAM, MIR:00100079, HMDB, ]
MTD	database[1]-prefix	hmdb
MTD	database[1]-version	3.6
MTD	database[1]-uri	http://www.hmdb.ca/
MTD	database[2]	[,, "de novo", ]
MTD	database[2]-prefix	dn
MTD	database[2]-version	Unknown
MTD	database[2]-uri	null
MTD	database[3]	[,, "no database", null ]
MTD	database[3]-prefix	null
MTD	database[3]-version	Unknown
MTD	database[3]-uri	null
</code></pre>
 * 
 *
 */
@ApiModel(description = "Specification of databases. (empty): The description of databases used. For cases, where a known database has not been used for identification, a userParam SHOULD be inserted to describe any identification performed e.g. de novo. If no identification has been performed at all then \"no database\" should be inserted followed by null. prefix: The prefix used in the “identifier” column of data tables. For the “no database” case \"null\" must be used. version: The database version is mandatory where identification has been performed. This may be a formal version number e.g. “1.4.1”, a date of access “2016-10-27” (ISO-8601 format) or “Unknown” if there is no suitable version that can be annotated. uri: The URI to the database. For the “no database” case, \"null\" must be reported. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Database")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Database")
public class Database extends IndexedElement {

  /**
   * Property enumeration for Database.
   */
  public static enum Properties {
      param("param"), 
      prefix("prefix"), 
      version("version"), 
      uri("uri");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("param")
  @JacksonXmlProperty(localName = "param")
  @XmlElement(name = "param")
  private Parameter param = null;
  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private String prefix = "null";
  @JsonProperty("version")
  @JacksonXmlProperty(localName = "version")
  @XmlElement(name = "version")
  private String version = null;
  @JsonProperty("uri")
  @JacksonXmlProperty(localName = "uri")
  @XmlElement(name = "uri")
  private String uri = null;
  
  @Override
  public Database id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Database elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for param.
   *
   * @see Database#setParam Database#setParam for specification examples
   * @see Database#getParam Database#getParam for validation constraints
   * @param param a {@code Parameter} parameter.
   * @return Database
  **/
  public Database param(Parameter param) {
   this.param = param;
   return this;
  }

   /**
   * The parameter to identify this database.
   *
   * @return param
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The parameter to identify this database.")
  public Parameter getParam() {
    return param;
  }

 /**
   * Set param.
   *
   * 
   * 
   * @see #getParam Database#getParam for validation constraints
   * @param param a {@code Parameter} parameter.
  **/
  public void setParam(Parameter param) {
    this.param = param;
  }


 /**
   * Builder method for prefix.
   *
   * @see Database#setPrefix Database#setPrefix for specification examples
   * @see Database#getPrefix Database#getPrefix for validation constraints
   * @param prefix a {@code String} parameter.
   * @return Database
  **/
  public Database prefix(String prefix) {
   this.prefix = prefix;
   return this;
  }

   /**
   * The database prefix.
   *
   * @return prefix
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The database prefix.")
  public String getPrefix() {
    return prefix;
  }

 /**
   * Set prefix.
   *
   * 
   * 
   * @see #getPrefix Database#getPrefix for validation constraints
   * @param prefix a {@code String} parameter.
  **/
  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


 /**
   * Builder method for version.
   *
   * @see Database#setVersion Database#setVersion for specification examples
   * @see Database#getVersion Database#getVersion for validation constraints
   * @param version a {@code String} parameter.
   * @return Database
  **/
  public Database version(String version) {
   this.version = version;
   return this;
  }

   /**
   * The database version.
   *
   * @return version
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The database version.")
  public String getVersion() {
    return version;
  }

 /**
   * Set version.
   *
   * 
   * 
   * @see #getVersion Database#getVersion for validation constraints
   * @param version a {@code String} parameter.
  **/
  public void setVersion(String version) {
    this.version = version;
  }


 /**
   * Builder method for uri.
   *
   * @see Database#setUri Database#setUri for specification examples
   * @see Database#getUri Database#getUri for validation constraints
   * @param uri a {@code String} parameter.
   * @return Database
  **/
  public Database uri(String uri) {
   this.uri = uri;
   return this;
  }

   /**
   * The URI to the online database.
   *
   * @return uri
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The URI to the online database.")
  public String getUri() {
    return uri;
  }

 /**
   * Set uri.
   *
   * 
   * 
   * @see #getUri Database#getUri for validation constraints
   * @param uri a {@code String} parameter.
  **/
  public void setUri(String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Database database = (Database) o;
    return Objects.equals(this.param, database.param) &&
        Objects.equals(this.prefix, database.prefix) &&
        Objects.equals(this.version, database.version) &&
        Objects.equals(this.uri, database.uri) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(param, prefix, version, uri, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Database {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

