/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.Comment;
import de.isas.mztab2.model.OptColumnMapping;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * The small molecule summary section is table-based, represented summarized quantitative information across assays and study variables, grouped by identification in rows. The small molecule section MUST always come after the metadata section. All table columns MUST be Tab separated. There MUST NOT be any empty cells; missing values MUST be reported using “null” for columns where Is Nullable = “True”.

Each row of the small molecule section is intended to report one final result to be communicated in terms of a molecule that has been quantified. In many cases, this may be the molecule of biological interest, although in some cases, the final result could be a derivatized form as appropriate – although it is desirable for the database identifier(s) to reference to the biological (non-derivatized) form. In general, different adduct forms would generally be reported in the Small Molecule Feature section.

The order of columns MUST follow the order specified below.

All columns are MANDATORY except for “opt_” columns.

 * 
 *
 * 
 *
 */
@ApiModel(description = "The small molecule summary section is table-based, represented summarized quantitative information across assays and study variables, grouped by identification in rows. The small molecule section MUST always come after the metadata section. All table columns MUST be Tab separated. There MUST NOT be any empty cells; missing values MUST be reported using “null” for columns where Is Nullable = “True”.  Each row of the small molecule section is intended to report one final result to be communicated in terms of a molecule that has been quantified. In many cases, this may be the molecule of biological interest, although in some cases, the final result could be a derivatized form as appropriate – although it is desirable for the database identifier(s) to reference to the biological (non-derivatized) form. In general, different adduct forms would generally be reported in the Small Molecule Feature section.  The order of columns MUST follow the order specified below.  All columns are MANDATORY except for “opt_” columns. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "SmallMoleculeSummary")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "SmallMoleculeSummary")
public class SmallMoleculeSummary {

  /**
   * Property enumeration for SmallMoleculeSummary.
   */
  public static enum Properties {
      prefix("prefix"), 
      headerPrefix("header_prefix"), 
      smlId("sml_id"), 
      smfIdRefs("smf_id_refs"), 
      databaseIdentifier("database_identifier"), 
      chemicalFormula("chemical_formula"), 
      smiles("smiles"), 
      inchi("inchi"), 
      chemicalName("chemical_name"), 
      uri("uri"), 
      theoreticalNeutralMass("theoretical_neutral_mass"), 
      adductIons("adduct_ions"), 
      reliability("reliability"), 
      bestIdConfidenceMeasure("best_id_confidence_measure"), 
      bestIdConfidenceValue("best_id_confidence_value"), 
      abundanceAssay("abundance_assay"), 
      abundanceStudyVariable("abundance_study_variable"), 
      abundanceVariationStudyVariable("abundance_variation_study_variable"), 
      opt("opt"), 
      comment("comment");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  /**
   * The small molecule table row prefix. SML MUST be used for rows of the small molecule table.
   */
  public enum PrefixEnum {
    SML("SML");

    private String value;

    PrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrefixEnum fromValue(String text) {
      for (PrefixEnum b : PrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private PrefixEnum prefix = PrefixEnum.SML;
  /**
   * The small molecule table header prefix. SMH MUST be used for the small molecule table header line (the column labels).
   */
  public enum HeaderPrefixEnum {
    SMH("SMH");

    private String value;

    HeaderPrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HeaderPrefixEnum fromValue(String text) {
      for (HeaderPrefixEnum b : HeaderPrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("header_prefix")
  @JacksonXmlProperty(localName = "header_prefix")
  @XmlElement(name = "header_prefix")
  private HeaderPrefixEnum headerPrefix = HeaderPrefixEnum.SMH;
  @JsonProperty("sml_id")
  @JacksonXmlProperty(localName = "sml_id")
  @XmlElement(name = "sml_id")
  private Integer smlId = null;
  @JsonProperty("smf_id_refs")
  // Is a container wrapped=false
  // items.name=smfIdRefs items.baseName=smfIdRefs items.xmlName= items.xmlNamespace=
  // items.example= items.type=Integer
  @XmlElement(name = "smfIdRefs")
  private List<Integer> smfIdRefs = null;
  @JsonProperty("database_identifier")
  // Is a container wrapped=false
  // items.name=databaseIdentifier items.baseName=databaseIdentifier items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "databaseIdentifier")
  private List<String> databaseIdentifier = null;
  @JsonProperty("chemical_formula")
  // Is a container wrapped=false
  // items.name=chemicalFormula items.baseName=chemicalFormula items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "chemicalFormula")
  private List<String> chemicalFormula = null;
  @JsonProperty("smiles")
  // Is a container wrapped=false
  // items.name=smiles items.baseName=smiles items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "smiles")
  private List<String> smiles = null;
  @JsonProperty("inchi")
  // Is a container wrapped=false
  // items.name=inchi items.baseName=inchi items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "inchi")
  private List<String> inchi = null;
  @JsonProperty("chemical_name")
  // Is a container wrapped=false
  // items.name=chemicalName items.baseName=chemicalName items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "chemicalName")
  private List<String> chemicalName = null;
  @JsonProperty("uri")
  // Is a container wrapped=false
  // items.name=uri items.baseName=uri items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "uri")
  private List<String> uri = null;
  @JsonProperty("theoretical_neutral_mass")
  // Is a container wrapped=false
  // items.name=theoreticalNeutralMass items.baseName=theoreticalNeutralMass items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "theoreticalNeutralMass")
  private List<Double> theoreticalNeutralMass = null;
  @JsonProperty("adduct_ions")
  // Is a container wrapped=false
  // items.name=adductIons items.baseName=adductIons items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "adductIons")
  private List<String> adductIons = null;
  @JsonProperty("reliability")
  @JacksonXmlProperty(localName = "reliability")
  @XmlElement(name = "reliability")
  private String reliability = null;
  @JsonProperty("best_id_confidence_measure")
  @JacksonXmlProperty(localName = "best_id_confidence_measure")
  @XmlElement(name = "best_id_confidence_measure")
  private Parameter bestIdConfidenceMeasure = null;
  @JsonProperty("best_id_confidence_value")
  @JacksonXmlProperty(localName = "best_id_confidence_value")
  @XmlElement(name = "best_id_confidence_value")
  private Double bestIdConfidenceValue = null;
  @JsonProperty("abundance_assay")
  // Is a container wrapped=false
  // items.name=abundanceAssay items.baseName=abundanceAssay items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceAssay")
  private List<Double> abundanceAssay = null;
  @JsonProperty("abundance_study_variable")
  // Is a container wrapped=false
  // items.name=abundanceStudyVariable items.baseName=abundanceStudyVariable items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceStudyVariable")
  private List<Double> abundanceStudyVariable = null;
  @JsonProperty("abundance_variation_study_variable")
  // Is a container wrapped=false
  // items.name=abundanceVariationStudyVariable items.baseName=abundanceVariationStudyVariable items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceVariationStudyVariable")
  private List<Double> abundanceVariationStudyVariable = null;
  @JsonProperty("opt")
  // Is a container wrapped=false
  // items.name=opt items.baseName=opt items.xmlName= items.xmlNamespace=
  // items.example= items.type=OptColumnMapping
  @XmlElement(name = "opt")
  private List<OptColumnMapping> opt = null;
  @JsonProperty("comment")
  // Is a container wrapped=false
  // items.name=comment items.baseName=comment items.xmlName= items.xmlNamespace=
  // items.example= items.type=Comment
  @XmlElement(name = "comment")
  private List<Comment> comment = null;
   /**
   * The small molecule table row prefix. SML MUST be used for rows of the small molecule table.
   *
   * @return prefix
  **/
  @ApiModelProperty(value = "The small molecule table row prefix. SML MUST be used for rows of the small molecule table.")
  public PrefixEnum getPrefix() {
    return prefix;
  }

   /**
   * The small molecule table header prefix. SMH MUST be used for the small molecule table header line (the column labels).
   *
   * @return headerPrefix
  **/
  @ApiModelProperty(value = "The small molecule table header prefix. SMH MUST be used for the small molecule table header line (the column labels).")
  public HeaderPrefixEnum getHeaderPrefix() {
    return headerPrefix;
  }


 /**
   * Builder method for smlId.
   *
   * @see SmallMoleculeSummary#setSmlId SmallMoleculeSummary#setSmlId for specification examples
   * @see SmallMoleculeSummary#getSmlId SmallMoleculeSummary#getSmlId for validation constraints
   * @param smlId a {@code Integer} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary smlId(Integer smlId) {
   this.smlId = smlId;
   return this;
  }

   /**
   * A within file unique identifier for the small molecule.
   *
   * @return smlId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "A within file unique identifier for the small molecule.")
  public Integer getSmlId() {
    return smlId;
  }

 /**
   * Set smlId.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…
SML	1	…
SML	2	…
</code></pre>
   * 
   * 
   * @see #getSmlId SmallMoleculeSummary#getSmlId for validation constraints
   * @param smlId a {@code Integer} parameter.
  **/
  public void setSmlId(Integer smlId) {
    this.smlId = smlId;
  }


 /**
   * Builder method for smfIdRefs.
   *
   * @see SmallMoleculeSummary#setSmfIdRefs SmallMoleculeSummary#setSmfIdRefs for specification examples
   * @see SmallMoleculeSummary#getSmfIdRefs SmallMoleculeSummary#getSmfIdRefs for validation constraints
   * @param smfIdRefs a {@code List<Integer>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary smfIdRefs(List<Integer> smfIdRefs) {
   this.smfIdRefs = smfIdRefs;
   return this;
  }

  /**
   * Add a single smfIdRefsItem to the smfIdRefs collection.
   *
   * @see SmallMoleculeSummary#getSmfIdRefs SmallMoleculeSummary#getSmfIdRefs for validation constraints
   * @param smfIdRefsItem a {@code Integer} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addSmfIdRefsItem(Integer smfIdRefsItem) {
    if (this.smfIdRefs == null) {
      this.smfIdRefs = new ArrayList<>();
    }
    this.smfIdRefs.add(smfIdRefsItem);
    return this;
  }

   /**
   * References to all the features on which quantitation has been based (SMF elements) via referencing SMF_ID values. Multiple values SHOULD be provided as a “|” separated list. This MAY be null only if this is a Summary file.
   *
   * @return smfIdRefs
  **/
  @ApiModelProperty(value = "References to all the features on which quantitation has been based (SMF elements) via referencing SMF_ID values. Multiple values SHOULD be provided as a “|” separated list. This MAY be null only if this is a Summary file.")
  public List<Integer> getSmfIdRefs() {
    return smfIdRefs;
  }

 /**
   * Set smfIdRefs.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	SMF_ID_REFS
SML	1	2|3|11…
</code></pre>
   * 
   * 
   * @see #getSmfIdRefs SmallMoleculeSummary#getSmfIdRefs for validation constraints
   * @param smfIdRefs a {@code List<Integer>} parameter.
  **/
  public void setSmfIdRefs(List<Integer> smfIdRefs) {
    this.smfIdRefs = smfIdRefs;
  }


 /**
   * Builder method for databaseIdentifier.
   *
   * @see SmallMoleculeSummary#setDatabaseIdentifier SmallMoleculeSummary#setDatabaseIdentifier for specification examples
   * @see SmallMoleculeSummary#getDatabaseIdentifier SmallMoleculeSummary#getDatabaseIdentifier for validation constraints
   * @param databaseIdentifier a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary databaseIdentifier(List<String> databaseIdentifier) {
   this.databaseIdentifier = databaseIdentifier;
   return this;
  }

  /**
   * Add a single databaseIdentifierItem to the databaseIdentifier collection.
   *
   * @see SmallMoleculeSummary#getDatabaseIdentifier SmallMoleculeSummary#getDatabaseIdentifier for validation constraints
   * @param databaseIdentifierItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addDatabaseIdentifierItem(String databaseIdentifierItem) {
    if (this.databaseIdentifier == null) {
      this.databaseIdentifier = new ArrayList<>();
    }
    this.databaseIdentifier.add(databaseIdentifierItem);
    return this;
  }

   /**
   * A list of “|” separated possible identifiers for the small molecule; multiple values MUST only be provided to indicate ambiguity in the identification of the molecule and not to demonstrate different identifier types for the same molecule. Alternative identifiers for the same molecule MAY be provided as optional columns.

The database identifier must be preceded by the resource description (prefix) followed by a colon, as specified in the metadata section.    

A null value MAY be provided if the identification is sufficiently ambiguous as to be meaningless for reporting or the small molecule has not been identified.

   *
   * @return databaseIdentifier
  **/
  @ApiModelProperty(value = "A list of “|” separated possible identifiers for the small molecule; multiple values MUST only be provided to indicate ambiguity in the identification of the molecule and not to demonstrate different identifier types for the same molecule. Alternative identifiers for the same molecule MAY be provided as optional columns.  The database identifier must be preceded by the resource description (prefix) followed by a colon, as specified in the metadata section.      A null value MAY be provided if the identification is sufficiently ambiguous as to be meaningless for reporting or the small molecule has not been identified. ")
  public List<String> getDatabaseIdentifier() {
    return databaseIdentifier;
  }

 /**
   * Set databaseIdentifier.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>A list of “|” separated possible identifiers for the small molecule; multiple values MUST only be provided to indicate ambiguity in the identification of the molecule and not to demonstrate different identifier types for the same molecule. Alternative identifiers for the same molecule MAY be provided as optional columns.

The database identifier must be preceded by the resource description (prefix) followed by a colon, as specified in the metadata section.

A null value MAY be provided if the identification is sufficiently ambiguous as to be meaningless for reporting or the small molecule has not been identified.
</code></pre>
   * 
   * 
   * @see #getDatabaseIdentifier SmallMoleculeSummary#getDatabaseIdentifier for validation constraints
   * @param databaseIdentifier a {@code List<String>} parameter.
  **/
  public void setDatabaseIdentifier(List<String> databaseIdentifier) {
    this.databaseIdentifier = databaseIdentifier;
  }


 /**
   * Builder method for chemicalFormula.
   *
   * @see SmallMoleculeSummary#setChemicalFormula SmallMoleculeSummary#setChemicalFormula for specification examples
   * @see SmallMoleculeSummary#getChemicalFormula SmallMoleculeSummary#getChemicalFormula for validation constraints
   * @param chemicalFormula a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary chemicalFormula(List<String> chemicalFormula) {
   this.chemicalFormula = chemicalFormula;
   return this;
  }

  /**
   * Add a single chemicalFormulaItem to the chemicalFormula collection.
   *
   * @see SmallMoleculeSummary#getChemicalFormula SmallMoleculeSummary#getChemicalFormula for validation constraints
   * @param chemicalFormulaItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addChemicalFormulaItem(String chemicalFormulaItem) {
    if (this.chemicalFormula == null) {
      this.chemicalFormula = new ArrayList<>();
    }
    this.chemicalFormula.add(chemicalFormulaItem);
    return this;
  }

   /**
   * A list of “|” separated potential chemical formulae of the reported compound. The number of values provided MUST match the number of entities reported under “database_identifier”, even if this leads to redundant reporting of information (i.e. if ambiguity can be resolved in the chemical formula), and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.

This should be specified in Hill notation (EA Hill 1900), i.e. elements in the order C, H and then alphabetically all other elements. Counts of one may be omitted. Elements should be capitalized properly to avoid confusion (e.g., “CO” vs. “Co”). The chemical formula reported should refer to the neutral form.

Example: N-acetylglucosamine would be encoded by the string “C8H15NO6”.

   *
   * @return chemicalFormula
  **/
  @ApiModelProperty(value = "A list of “|” separated potential chemical formulae of the reported compound. The number of values provided MUST match the number of entities reported under “database_identifier”, even if this leads to redundant reporting of information (i.e. if ambiguity can be resolved in the chemical formula), and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.  This should be specified in Hill notation (EA Hill 1900), i.e. elements in the order C, H and then alphabetically all other elements. Counts of one may be omitted. Elements should be capitalized properly to avoid confusion (e.g., “CO” vs. “Co”). The chemical formula reported should refer to the neutral form.  Example: N-acetylglucosamine would be encoded by the string “C8H15NO6”. ")
  public List<String> getChemicalFormula() {
    return chemicalFormula;
  }

 /**
   * Set chemicalFormula.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	chemical_formula	…
SML	1	…	C17H20N4O2	…
</code></pre>
   * 
   * 
   * @see #getChemicalFormula SmallMoleculeSummary#getChemicalFormula for validation constraints
   * @param chemicalFormula a {@code List<String>} parameter.
  **/
  public void setChemicalFormula(List<String> chemicalFormula) {
    this.chemicalFormula = chemicalFormula;
  }


 /**
   * Builder method for smiles.
   *
   * @see SmallMoleculeSummary#setSmiles SmallMoleculeSummary#setSmiles for specification examples
   * @see SmallMoleculeSummary#getSmiles SmallMoleculeSummary#getSmiles for validation constraints
   * @param smiles a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary smiles(List<String> smiles) {
   this.smiles = smiles;
   return this;
  }

  /**
   * Add a single smilesItem to the smiles collection.
   *
   * @see SmallMoleculeSummary#getSmiles SmallMoleculeSummary#getSmiles for validation constraints
   * @param smilesItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addSmilesItem(String smilesItem) {
    if (this.smiles == null) {
      this.smiles = new ArrayList<>();
    }
    this.smiles.add(smilesItem);
    return this;
  }

   /**
   * A list of “|” separated potential molecule structures in the simplified molecular-input line-entry system (SMILES) for the small molecule. The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.
   *
   * @return smiles
  **/
  @ApiModelProperty(value = "A list of “|” separated potential molecule structures in the simplified molecular-input line-entry system (SMILES) for the small molecule. The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.")
  public List<String> getSmiles() {
    return smiles;
  }

 /**
   * Set smiles.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	chemical_formula	smiles	…
SML	1	…	C17H20N4O2	C1=CC=C(C=C1)CCNC(=O)CCNNC(=O)C2=CC=NC=C2	…
</code></pre>
   * 
   * 
   * @see #getSmiles SmallMoleculeSummary#getSmiles for validation constraints
   * @param smiles a {@code List<String>} parameter.
  **/
  public void setSmiles(List<String> smiles) {
    this.smiles = smiles;
  }


 /**
   * Builder method for inchi.
   *
   * @see SmallMoleculeSummary#setInchi SmallMoleculeSummary#setInchi for specification examples
   * @see SmallMoleculeSummary#getInchi SmallMoleculeSummary#getInchi for validation constraints
   * @param inchi a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary inchi(List<String> inchi) {
   this.inchi = inchi;
   return this;
  }

  /**
   * Add a single inchiItem to the inchi collection.
   *
   * @see SmallMoleculeSummary#getInchi SmallMoleculeSummary#getInchi for validation constraints
   * @param inchiItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addInchiItem(String inchiItem) {
    if (this.inchi == null) {
      this.inchi = new ArrayList<>();
    }
    this.inchi.add(inchiItem);
    return this;
  }

   /**
   * A list of “|” separated potential standard IUPAC International Chemical Identifier (InChI) of the given substance.

The number of values provided MUST match the number of entities reported under “database_identifier”, even if this leads to redundant information being reported (i.e. if ambiguity can be resolved in the InChi), and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.

   *
   * @return inchi
  **/
  @ApiModelProperty(value = "A list of “|” separated potential standard IUPAC International Chemical Identifier (InChI) of the given substance.  The number of values provided MUST match the number of entities reported under “database_identifier”, even if this leads to redundant information being reported (i.e. if ambiguity can be resolved in the InChi), and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed. ")
  public List<String> getInchi() {
    return inchi;
  }

 /**
   * Set inchi.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	chemical_formula	…	inchi	…
SML	1	…	C17H20N4O2	…	InChI=1S/C17H20N4O2/c22-16(19-12-6-14-4-2-1-3-5-14)9-13-20-21-17(23)15-7-10-18-11-8-15/h1-5,7-8,10-11,20H,6,9,12-13H2,(H,19,22)(H,21,23)	…
</code></pre>
   * 
   * 
   * @see #getInchi SmallMoleculeSummary#getInchi for validation constraints
   * @param inchi a {@code List<String>} parameter.
  **/
  public void setInchi(List<String> inchi) {
    this.inchi = inchi;
  }


 /**
   * Builder method for chemicalName.
   *
   * @see SmallMoleculeSummary#setChemicalName SmallMoleculeSummary#setChemicalName for specification examples
   * @see SmallMoleculeSummary#getChemicalName SmallMoleculeSummary#getChemicalName for validation constraints
   * @param chemicalName a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary chemicalName(List<String> chemicalName) {
   this.chemicalName = chemicalName;
   return this;
  }

  /**
   * Add a single chemicalNameItem to the chemicalName collection.
   *
   * @see SmallMoleculeSummary#getChemicalName SmallMoleculeSummary#getChemicalName for validation constraints
   * @param chemicalNameItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addChemicalNameItem(String chemicalNameItem) {
    if (this.chemicalName == null) {
      this.chemicalName = new ArrayList<>();
    }
    this.chemicalName.add(chemicalNameItem);
    return this;
  }

   /**
   * A list of “|” separated possible chemical/common names for the small molecule, or general description if a chemical name is unavailable. Multiple names are only to demonstrate ambiguity in the identification. The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.

   *
   * @return chemicalName
  **/
  @ApiModelProperty(value = "A list of “|” separated possible chemical/common names for the small molecule, or general description if a chemical name is unavailable. Multiple names are only to demonstrate ambiguity in the identification. The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed. ")
  public List<String> getChemicalName() {
    return chemicalName;
  }

 /**
   * Set chemicalName.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	description	…
SML	1	…	N-(2-phenylethyl)-3-[2-(pyridine-4-carbonyl)hydrazinyl]propanamide	…
</code></pre>
   * 
   * 
   * @see #getChemicalName SmallMoleculeSummary#getChemicalName for validation constraints
   * @param chemicalName a {@code List<String>} parameter.
  **/
  public void setChemicalName(List<String> chemicalName) {
    this.chemicalName = chemicalName;
  }


 /**
   * Builder method for uri.
   *
   * @see SmallMoleculeSummary#setUri SmallMoleculeSummary#setUri for specification examples
   * @see SmallMoleculeSummary#getUri SmallMoleculeSummary#getUri for validation constraints
   * @param uri a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary uri(List<String> uri) {
   this.uri = uri;
   return this;
  }

  /**
   * Add a single uriItem to the uri collection.
   *
   * @see SmallMoleculeSummary#getUri SmallMoleculeSummary#getUri for validation constraints
   * @param uriItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addUriItem(String uriItem) {
    if (this.uri == null) {
      this.uri = new ArrayList<>();
    }
    this.uri.add(uriItem);
    return this;
  }

   /**
   * A URI pointing to the small molecule’s entry in a reference database (e.g., the small molecule’s HMDB or KEGG entry). The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.
   *
   * @return uri
  **/
  @ApiModelProperty(value = "A URI pointing to the small molecule’s entry in a reference database (e.g., the small molecule’s HMDB or KEGG entry). The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values between bars are allowed.")
  public List<String> getUri() {
    return uri;
  }

 /**
   * Set uri.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	uri	…
SML	1	…	http://www.genome.jp/dbget-bin/www_bget?cpd:C00031	…
SML	2	…	http://www.hmdb.ca/metabolites/HMDB0001847	…
SML	3	…	http://identifiers.org/hmdb/HMDB0001847	…
</code></pre>
   * 
   * 
   * @see #getUri SmallMoleculeSummary#getUri for validation constraints
   * @param uri a {@code List<String>} parameter.
  **/
  public void setUri(List<String> uri) {
    this.uri = uri;
  }


 /**
   * Builder method for theoreticalNeutralMass.
   *
   * @see SmallMoleculeSummary#setTheoreticalNeutralMass SmallMoleculeSummary#setTheoreticalNeutralMass for specification examples
   * @see SmallMoleculeSummary#getTheoreticalNeutralMass SmallMoleculeSummary#getTheoreticalNeutralMass for validation constraints
   * @param theoreticalNeutralMass a {@code List<Double>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary theoreticalNeutralMass(List<Double> theoreticalNeutralMass) {
   this.theoreticalNeutralMass = theoreticalNeutralMass;
   return this;
  }

  /**
   * Add a single theoreticalNeutralMassItem to the theoreticalNeutralMass collection.
   *
   * @see SmallMoleculeSummary#getTheoreticalNeutralMass SmallMoleculeSummary#getTheoreticalNeutralMass for validation constraints
   * @param theoreticalNeutralMassItem a {@code Double} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addTheoreticalNeutralMassItem(Double theoreticalNeutralMassItem) {
    if (this.theoreticalNeutralMass == null) {
      this.theoreticalNeutralMass = new ArrayList<>();
    }
    this.theoreticalNeutralMass.add(theoreticalNeutralMassItem);
    return this;
  }

   /**
   * The small molecule’s precursor’s theoretical neutral mass.

The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values (in general and between bars) are allowed for molecules that have not been identified only, or for molecules where the neutral mass cannot be calculated. In these cases, the SML entry SHOULD reference features in which exp_mass_to_charge values are captured.

   *
   * @return theoreticalNeutralMass
  **/
  @ApiModelProperty(value = "The small molecule’s precursor’s theoretical neutral mass.  The number of values provided MUST match the number of entities reported under “database_identifier”, and the validation software will throw an error if the number of “|” symbols does not match. “null” values (in general and between bars) are allowed for molecules that have not been identified only, or for molecules where the neutral mass cannot be calculated. In these cases, the SML entry SHOULD reference features in which exp_mass_to_charge values are captured. ")
  public List<Double> getTheoreticalNeutralMass() {
    return theoreticalNeutralMass;
  }

 /**
   * Set theoreticalNeutralMass.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	theoretical_neutral_mass	…
SML	1	…	1234.5	…
</code></pre>
   * 
   * 
   * @see #getTheoreticalNeutralMass SmallMoleculeSummary#getTheoreticalNeutralMass for validation constraints
   * @param theoreticalNeutralMass a {@code List<Double>} parameter.
  **/
  public void setTheoreticalNeutralMass(List<Double> theoreticalNeutralMass) {
    this.theoreticalNeutralMass = theoreticalNeutralMass;
  }


 /**
   * Builder method for adductIons.
   *
   * @see SmallMoleculeSummary#setAdductIons SmallMoleculeSummary#setAdductIons for specification examples
   * @see SmallMoleculeSummary#getAdductIons SmallMoleculeSummary#getAdductIons for validation constraints
   * @param adductIons a {@code List<String>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary adductIons(List<String> adductIons) {
   this.adductIons = adductIons;
   return this;
  }

  /**
   * Add a single adductIonsItem to the adductIons collection.
   *
   * @see SmallMoleculeSummary#getAdductIons SmallMoleculeSummary#getAdductIons for validation constraints
   * @param adductIonsItem a {@code String} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addAdductIonsItem(String adductIonsItem) {
    if (this.adductIons == null) {
      this.adductIons = new ArrayList<>();
    }
    this.adductIons.add(adductIonsItem);
    return this;
  }

   /**
   * A “|” separated list of detected adducts for this this molecule, following the general style in the 2013 IUPAC recommendations on terms relating to MS e.g. [M+H]1+, [M+Na]1+, [M+NH4]1+, [M-H]1-, [M+Cl]1-, [M+H]1+. If the adduct classification is ambiguous with regards to identification evidence it MAY be null.

   *
   * @return adductIons
  **/
  @ApiModelProperty(value = "A “|” separated list of detected adducts for this this molecule, following the general style in the 2013 IUPAC recommendations on terms relating to MS e.g. [M+H]1+, [M+Na]1+, [M+NH4]1+, [M-H]1-, [M+Cl]1-, [M+H]1+. If the adduct classification is ambiguous with regards to identification evidence it MAY be null. ")
  public List<String> getAdductIons() {
    return adductIons;
  }

 /**
   * Set adductIons.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	adduct_ions	…
SML	1	…	[M+H]1+ | [M+Na]1+	…
</code></pre>
   * 
   * 
   * @see #getAdductIons SmallMoleculeSummary#getAdductIons for validation constraints
   * @param adductIons a {@code List<String>} parameter.
  **/
  public void setAdductIons(List<String> adductIons) {
    this.adductIons = adductIons;
  }


 /**
   * Builder method for reliability.
   *
   * @see SmallMoleculeSummary#setReliability SmallMoleculeSummary#setReliability for specification examples
   * @see SmallMoleculeSummary#getReliability SmallMoleculeSummary#getReliability for validation constraints
   * @param reliability a {@code String} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary reliability(String reliability) {
   this.reliability = reliability;
   return this;
  }

   /**
   * The reliability of the given small molecule identification. This must be supplied by the resource and MUST be reported as an integer between 1-4:

    identified metabolite (1)

    putatively annotated compound (2)

    putatively characterized compound class (3)

    unknown compound (4)

These MAY be replaced using a suitable CV term in the metadata section e.g. to use MSI recommendation levels (see Section 6.2.57 for details).

The following CV terms are already available within the PSI MS CV. Future schemes may be implemented by extending the PSI MS CV with new terms and associated levels.

The MSI has recently discussed an extension of the original four level scheme into a five level scheme MS:1002896 (compound identification confidence level) with levels

    isolated, pure compound, full stereochemistry (0)

    reference standard match or full 2D structure (1)

    unambiguous diagnostic evidence (literature, database) (2)

    most likely structure, including isomers, substance class or substructure match (3)

    unknown compound (4)

For high-resolution MS, the following term and its levels may be used: MS:1002955 (hr-ms compound identification confidence level) with levels

    confirmed structure (1)

    probable structure (2)

        unambiguous ms library match (2a)

        diagnostic evidence (2b)

    tentative candidates (3)

    unequivocal molecular formula (4)

    exact mass (5)

A String data type is set to allow for different systems to be specified in the metadata section.

   *
   * @return reliability
  **/
  @ApiModelProperty(value = "The reliability of the given small molecule identification. This must be supplied by the resource and MUST be reported as an integer between 1-4:      identified metabolite (1)      putatively annotated compound (2)      putatively characterized compound class (3)      unknown compound (4)  These MAY be replaced using a suitable CV term in the metadata section e.g. to use MSI recommendation levels (see Section 6.2.57 for details).  The following CV terms are already available within the PSI MS CV. Future schemes may be implemented by extending the PSI MS CV with new terms and associated levels.  The MSI has recently discussed an extension of the original four level scheme into a five level scheme MS:1002896 (compound identification confidence level) with levels      isolated, pure compound, full stereochemistry (0)      reference standard match or full 2D structure (1)      unambiguous diagnostic evidence (literature, database) (2)      most likely structure, including isomers, substance class or substructure match (3)      unknown compound (4)  For high-resolution MS, the following term and its levels may be used: MS:1002955 (hr-ms compound identification confidence level) with levels      confirmed structure (1)      probable structure (2)          unambiguous ms library match (2a)          diagnostic evidence (2b)      tentative candidates (3)      unequivocal molecular formula (4)      exact mass (5)  A String data type is set to allow for different systems to be specified in the metadata section. ")
  public String getReliability() {
    return reliability;
  }

 /**
   * Set reliability.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	identifier	…	reliability	…
SML	1	…	3	…

or
MTD	small_molecule-identification_reliability	[MS, MS:1002896, compound identification confidence level,]
…
SMH	identifier	…	reliability	…
SML	1	…	0	…

or
MTD	small_molecule-identification_reliability	[MS, MS:1002955, hr-ms compound identification confidence level,]
…
SMH	identifier	…	reliability	…
SML	1	…	2a	…
</code></pre>
   * 
   * 
   * @see #getReliability SmallMoleculeSummary#getReliability for validation constraints
   * @param reliability a {@code String} parameter.
  **/
  public void setReliability(String reliability) {
    this.reliability = reliability;
  }


 /**
   * Builder method for bestIdConfidenceMeasure.
   *
   * @see SmallMoleculeSummary#setBestIdConfidenceMeasure SmallMoleculeSummary#setBestIdConfidenceMeasure for specification examples
   * @see SmallMoleculeSummary#getBestIdConfidenceMeasure SmallMoleculeSummary#getBestIdConfidenceMeasure for validation constraints
   * @param bestIdConfidenceMeasure a {@code Parameter} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary bestIdConfidenceMeasure(Parameter bestIdConfidenceMeasure) {
   this.bestIdConfidenceMeasure = bestIdConfidenceMeasure;
   return this;
  }

   /**
   * The approach or database search that identified this small molecule with highest confidence.
   *
   * @return bestIdConfidenceMeasure
  **/
  @Valid
  @ApiModelProperty(value = "The approach or database search that identified this small molecule with highest confidence.")
  public Parameter getBestIdConfidenceMeasure() {
    return bestIdConfidenceMeasure;
  }

 /**
   * Set bestIdConfidenceMeasure.
   *
   * 
   * 
   * @see #getBestIdConfidenceMeasure SmallMoleculeSummary#getBestIdConfidenceMeasure for validation constraints
   * @param bestIdConfidenceMeasure a {@code Parameter} parameter.
  **/
  public void setBestIdConfidenceMeasure(Parameter bestIdConfidenceMeasure) {
    this.bestIdConfidenceMeasure = bestIdConfidenceMeasure;
  }


 /**
   * Builder method for bestIdConfidenceValue.
   *
   * @see SmallMoleculeSummary#setBestIdConfidenceValue SmallMoleculeSummary#setBestIdConfidenceValue for specification examples
   * @see SmallMoleculeSummary#getBestIdConfidenceValue SmallMoleculeSummary#getBestIdConfidenceValue for validation constraints
   * @param bestIdConfidenceValue a {@code Double} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary bestIdConfidenceValue(Double bestIdConfidenceValue) {
   this.bestIdConfidenceValue = bestIdConfidenceValue;
   return this;
  }

   /**
   * The best confidence measure in identification (for this type of score) for the given small molecule across all assays. The type of score MUST be defined in the metadata section. If the small molecule was not identified by the specified search engine, “null” MUST be reported. If the confidence measure does not report a numerical confidence value, “null” SHOULD be reported.
   *
   * @return bestIdConfidenceValue
  **/
  @ApiModelProperty(value = "The best confidence measure in identification (for this type of score) for the given small molecule across all assays. The type of score MUST be defined in the metadata section. If the small molecule was not identified by the specified search engine, “null” MUST be reported. If the confidence measure does not report a numerical confidence value, “null” SHOULD be reported.")
  public Double getBestIdConfidenceValue() {
    return bestIdConfidenceValue;
  }

 /**
   * Set bestIdConfidenceValue.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	best_id_confidence_value	…
SML	1	…	0.7	…
</code></pre>
   * 
   * 
   * @see #getBestIdConfidenceValue SmallMoleculeSummary#getBestIdConfidenceValue for validation constraints
   * @param bestIdConfidenceValue a {@code Double} parameter.
  **/
  public void setBestIdConfidenceValue(Double bestIdConfidenceValue) {
    this.bestIdConfidenceValue = bestIdConfidenceValue;
  }


 /**
   * Builder method for abundanceAssay.
   *
   * @see SmallMoleculeSummary#setAbundanceAssay SmallMoleculeSummary#setAbundanceAssay for specification examples
   * @see SmallMoleculeSummary#getAbundanceAssay SmallMoleculeSummary#getAbundanceAssay for validation constraints
   * @param abundanceAssay a {@code List<Double>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary abundanceAssay(List<Double> abundanceAssay) {
   this.abundanceAssay = abundanceAssay;
   return this;
  }

  /**
   * Add a single abundanceAssayItem to the abundanceAssay collection.
   *
   * @see SmallMoleculeSummary#getAbundanceAssay SmallMoleculeSummary#getAbundanceAssay for validation constraints
   * @param abundanceAssayItem a {@code Double} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addAbundanceAssayItem(Double abundanceAssayItem) {
    if (this.abundanceAssay == null) {
      this.abundanceAssay = new ArrayList<>();
    }
    this.abundanceAssay.add(abundanceAssayItem);
    return this;
  }

   /**
   * The small molecule’s abundance in every assay described in the metadata section MUST be reported. Null or zero values may be reported as appropriate. &quot;null&quot; SHOULD be used to report missing quantities, while zero SHOULD be used to indicate a present but not reliably quantifiable value (e.g. below a minimum noise threshold).
   *
   * @return abundanceAssay
  **/
  @ApiModelProperty(value = "The small molecule’s abundance in every assay described in the metadata section MUST be reported. Null or zero values may be reported as appropriate. \"null\" SHOULD be used to report missing quantities, while zero SHOULD be used to indicate a present but not reliably quantifiable value (e.g. below a minimum noise threshold).")
  public List<Double> getAbundanceAssay() {
    return abundanceAssay;
  }

 /**
   * Set abundanceAssay.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	abundance_assay[1]	…
SML	1	…	0.3	…
</code></pre>
   * 
   * 
   * @see #getAbundanceAssay SmallMoleculeSummary#getAbundanceAssay for validation constraints
   * @param abundanceAssay a {@code List<Double>} parameter.
  **/
  public void setAbundanceAssay(List<Double> abundanceAssay) {
    this.abundanceAssay = abundanceAssay;
  }


 /**
   * Builder method for abundanceStudyVariable.
   *
   * @see SmallMoleculeSummary#setAbundanceStudyVariable SmallMoleculeSummary#setAbundanceStudyVariable for specification examples
   * @see SmallMoleculeSummary#getAbundanceStudyVariable SmallMoleculeSummary#getAbundanceStudyVariable for validation constraints
   * @param abundanceStudyVariable a {@code List<Double>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary abundanceStudyVariable(List<Double> abundanceStudyVariable) {
   this.abundanceStudyVariable = abundanceStudyVariable;
   return this;
  }

  /**
   * Add a single abundanceStudyVariableItem to the abundanceStudyVariable collection.
   *
   * @see SmallMoleculeSummary#getAbundanceStudyVariable SmallMoleculeSummary#getAbundanceStudyVariable for validation constraints
   * @param abundanceStudyVariableItem a {@code Double} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addAbundanceStudyVariableItem(Double abundanceStudyVariableItem) {
    if (this.abundanceStudyVariable == null) {
      this.abundanceStudyVariable = new ArrayList<>();
    }
    this.abundanceStudyVariable.add(abundanceStudyVariableItem);
    return this;
  }

   /**
   * The small molecule’s abundance in all the study variables described in the metadata section (study_variable[1-n]_average_function), calculated using the method as described in the Metadata section (default &#x3D; arithmetic mean across assays). Null or zero values may be reported as appropriate. &quot;null&quot; SHOULD be used to report missing quantities, while zero SHOULD be used to indicate a present but not reliably quantifiable value (e.g. below a minimum noise threshold).
   *
   * @return abundanceStudyVariable
  **/
  @ApiModelProperty(value = "The small molecule’s abundance in all the study variables described in the metadata section (study_variable[1-n]_average_function), calculated using the method as described in the Metadata section (default = arithmetic mean across assays). Null or zero values may be reported as appropriate. \"null\" SHOULD be used to report missing quantities, while zero SHOULD be used to indicate a present but not reliably quantifiable value (e.g. below a minimum noise threshold).")
  public List<Double> getAbundanceStudyVariable() {
    return abundanceStudyVariable;
  }

 /**
   * Set abundanceStudyVariable.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	abundance_study_variable[1]	…
SML	1	…	0.3	…
</code></pre>
   * 
   * 
   * @see #getAbundanceStudyVariable SmallMoleculeSummary#getAbundanceStudyVariable for validation constraints
   * @param abundanceStudyVariable a {@code List<Double>} parameter.
  **/
  public void setAbundanceStudyVariable(List<Double> abundanceStudyVariable) {
    this.abundanceStudyVariable = abundanceStudyVariable;
  }


 /**
   * Builder method for abundanceVariationStudyVariable.
   *
   * @see SmallMoleculeSummary#setAbundanceVariationStudyVariable SmallMoleculeSummary#setAbundanceVariationStudyVariable for specification examples
   * @see SmallMoleculeSummary#getAbundanceVariationStudyVariable SmallMoleculeSummary#getAbundanceVariationStudyVariable for validation constraints
   * @param abundanceVariationStudyVariable a {@code List<Double>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary abundanceVariationStudyVariable(List<Double> abundanceVariationStudyVariable) {
   this.abundanceVariationStudyVariable = abundanceVariationStudyVariable;
   return this;
  }

  /**
   * Add a single abundanceVariationStudyVariableItem to the abundanceVariationStudyVariable collection.
   *
   * @see SmallMoleculeSummary#getAbundanceVariationStudyVariable SmallMoleculeSummary#getAbundanceVariationStudyVariable for validation constraints
   * @param abundanceVariationStudyVariableItem a {@code Double} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addAbundanceVariationStudyVariableItem(Double abundanceVariationStudyVariableItem) {
    if (this.abundanceVariationStudyVariable == null) {
      this.abundanceVariationStudyVariable = new ArrayList<>();
    }
    this.abundanceVariationStudyVariable.add(abundanceVariationStudyVariableItem);
    return this;
  }

   /**
   * A measure of the variability of the study variable abundance measurement, calculated using the method as described in the metadata section (study_variable[1-n]_average_function), with a default &#x3D; arithmethic co-efficient of variation of the small molecule’s abundance in the given study variable.
   *
   * @return abundanceVariationStudyVariable
  **/
  @ApiModelProperty(value = "A measure of the variability of the study variable abundance measurement, calculated using the method as described in the metadata section (study_variable[1-n]_average_function), with a default = arithmethic co-efficient of variation of the small molecule’s abundance in the given study variable.")
  public List<Double> getAbundanceVariationStudyVariable() {
    return abundanceVariationStudyVariable;
  }

 /**
   * Set abundanceVariationStudyVariable.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	abundance_study_variable[1]	abundance_variation_study_variable[1]	…
SML	1	…	0.3	0.04	…
</code></pre>
   * 
   * 
   * @see #getAbundanceVariationStudyVariable SmallMoleculeSummary#getAbundanceVariationStudyVariable for validation constraints
   * @param abundanceVariationStudyVariable a {@code List<Double>} parameter.
  **/
  public void setAbundanceVariationStudyVariable(List<Double> abundanceVariationStudyVariable) {
    this.abundanceVariationStudyVariable = abundanceVariationStudyVariable;
  }


 /**
   * Builder method for opt.
   *
   * @see SmallMoleculeSummary#setOpt SmallMoleculeSummary#setOpt for specification examples
   * @see SmallMoleculeSummary#getOpt SmallMoleculeSummary#getOpt for validation constraints
   * @param opt a {@code List<OptColumnMapping>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary opt(List<OptColumnMapping> opt) {
   this.opt = opt;
   return this;
  }

  /**
   * Add a single optItem to the opt collection.
   *
   * @see SmallMoleculeSummary#getOpt SmallMoleculeSummary#getOpt for validation constraints
   * @param optItem a {@code OptColumnMapping} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addOptItem(OptColumnMapping optItem) {
    if (this.opt == null) {
      this.opt = new ArrayList<>();
    }
    this.opt.add(optItem);
    return this;
  }

   /**
   * Additional columns can be added to the end of the small molecule table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’.

   *
   * @return opt
  **/
  @Valid
  @ApiModelProperty(value = "Additional columns can be added to the end of the small molecule table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’. ")
  public List<OptColumnMapping> getOpt() {
    return opt;
  }

 /**
   * Set opt.
   *
   * <p>mzTab-M specification example(s):</p>
   * <pre><code>SMH	SML_ID	…	opt_assay[1]_my_value	…	opt_global_another_value
SML	1	…	My value	…	some other value
</code></pre>
   * 
   * 
   * @see #getOpt SmallMoleculeSummary#getOpt for validation constraints
   * @param opt a {@code List<OptColumnMapping>} parameter.
  **/
  public void setOpt(List<OptColumnMapping> opt) {
    this.opt = opt;
  }


 /**
   * Builder method for comment.
   *
   * @see SmallMoleculeSummary#setComment SmallMoleculeSummary#setComment for specification examples
   * @see SmallMoleculeSummary#getComment SmallMoleculeSummary#getComment for validation constraints
   * @param comment a {@code List<Comment>} parameter.
   * @return SmallMoleculeSummary
  **/
  public SmallMoleculeSummary comment(List<Comment> comment) {
   this.comment = comment;
   return this;
  }

  /**
   * Add a single commentItem to the comment collection.
   *
   * @see SmallMoleculeSummary#getComment SmallMoleculeSummary#getComment for validation constraints
   * @param commentItem a {@code Comment} parameter.
   * @return SmallMoleculeSummary
   */
  public SmallMoleculeSummary addCommentItem(Comment commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * <p>Get comment.</p>
   *
   * @return comment
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Comment> getComment() {
    return comment;
  }

 /**
   * Set comment.
   *
   * 
   * 
   * @see #getComment SmallMoleculeSummary#getComment for validation constraints
   * @param comment a {@code List<Comment>} parameter.
  **/
  public void setComment(List<Comment> comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmallMoleculeSummary smallMoleculeSummary = (SmallMoleculeSummary) o;
    return Objects.equals(this.prefix, smallMoleculeSummary.prefix) &&
        Objects.equals(this.headerPrefix, smallMoleculeSummary.headerPrefix) &&
        Objects.equals(this.smlId, smallMoleculeSummary.smlId) &&
        Objects.equals(this.smfIdRefs, smallMoleculeSummary.smfIdRefs) &&
        Objects.equals(this.databaseIdentifier, smallMoleculeSummary.databaseIdentifier) &&
        Objects.equals(this.chemicalFormula, smallMoleculeSummary.chemicalFormula) &&
        Objects.equals(this.smiles, smallMoleculeSummary.smiles) &&
        Objects.equals(this.inchi, smallMoleculeSummary.inchi) &&
        Objects.equals(this.chemicalName, smallMoleculeSummary.chemicalName) &&
        Objects.equals(this.uri, smallMoleculeSummary.uri) &&
        Objects.equals(this.theoreticalNeutralMass, smallMoleculeSummary.theoreticalNeutralMass) &&
        Objects.equals(this.adductIons, smallMoleculeSummary.adductIons) &&
        Objects.equals(this.reliability, smallMoleculeSummary.reliability) &&
        Objects.equals(this.bestIdConfidenceMeasure, smallMoleculeSummary.bestIdConfidenceMeasure) &&
        Objects.equals(this.bestIdConfidenceValue, smallMoleculeSummary.bestIdConfidenceValue) &&
        Objects.equals(this.abundanceAssay, smallMoleculeSummary.abundanceAssay) &&
        Objects.equals(this.abundanceStudyVariable, smallMoleculeSummary.abundanceStudyVariable) &&
        Objects.equals(this.abundanceVariationStudyVariable, smallMoleculeSummary.abundanceVariationStudyVariable) &&
        Objects.equals(this.opt, smallMoleculeSummary.opt) &&
        Objects.equals(this.comment, smallMoleculeSummary.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, headerPrefix, smlId, smfIdRefs, databaseIdentifier, chemicalFormula, smiles, inchi, chemicalName, uri, theoreticalNeutralMass, adductIons, reliability, bestIdConfidenceMeasure, bestIdConfidenceValue, abundanceAssay, abundanceStudyVariable, abundanceVariationStudyVariable, opt, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmallMoleculeSummary {\n");
    
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    headerPrefix: ").append(toIndentedString(headerPrefix)).append("\n");
    sb.append("    smlId: ").append(toIndentedString(smlId)).append("\n");
    sb.append("    smfIdRefs: ").append(toIndentedString(smfIdRefs)).append("\n");
    sb.append("    databaseIdentifier: ").append(toIndentedString(databaseIdentifier)).append("\n");
    sb.append("    chemicalFormula: ").append(toIndentedString(chemicalFormula)).append("\n");
    sb.append("    smiles: ").append(toIndentedString(smiles)).append("\n");
    sb.append("    inchi: ").append(toIndentedString(inchi)).append("\n");
    sb.append("    chemicalName: ").append(toIndentedString(chemicalName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    theoreticalNeutralMass: ").append(toIndentedString(theoreticalNeutralMass)).append("\n");
    sb.append("    adductIons: ").append(toIndentedString(adductIons)).append("\n");
    sb.append("    reliability: ").append(toIndentedString(reliability)).append("\n");
    sb.append("    bestIdConfidenceMeasure: ").append(toIndentedString(bestIdConfidenceMeasure)).append("\n");
    sb.append("    bestIdConfidenceValue: ").append(toIndentedString(bestIdConfidenceValue)).append("\n");
    sb.append("    abundanceAssay: ").append(toIndentedString(abundanceAssay)).append("\n");
    sb.append("    abundanceStudyVariable: ").append(toIndentedString(abundanceStudyVariable)).append("\n");
    sb.append("    abundanceVariationStudyVariable: ").append(toIndentedString(abundanceVariationStudyVariable)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

