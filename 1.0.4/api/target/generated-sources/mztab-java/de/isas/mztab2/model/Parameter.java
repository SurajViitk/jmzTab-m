/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value.
Parameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>[MS, MS:1001477, SpectraST,]
[,,A user parameter, The value]
</code></pre>
 * 
 *
 */
@ApiModel(description = "mzTab makes use of CV parameters. As mzTab is expected to be used in several experimental environments where parameters might not yet be available for the generated scores etc. all parameters can either report CV parameters or user parameters that only contain a name and a value. Parameters are always reported as [CV label, accession, name, value]. Any field that is not available MUST be left empty. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Parameter")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Parameter")
public class Parameter extends IndexedElement {

  /**
   * Property enumeration for Parameter.
   */
  public static enum Properties {
      cvLabel("cv_label"), 
      cvAccession("cv_accession"), 
      name("name"), 
      value("value");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("cv_label")
  @JacksonXmlProperty(localName = "cv_label")
  @XmlElement(name = "cv_label")
  private String cvLabel = "";
  @JsonProperty("cv_accession")
  @JacksonXmlProperty(localName = "cv_accession")
  @XmlElement(name = "cv_accession")
  private String cvAccession = "";
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private String name = null;
  @JsonProperty("value")
  @JacksonXmlProperty(localName = "value")
  @XmlElement(name = "value")
  private String value = "";
  
  @Override
  public Parameter id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Parameter elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for cvLabel.
   *
   * @see Parameter#setCvLabel Parameter#setCvLabel for specification examples
   * @see Parameter#getCvLabel Parameter#getCvLabel for validation constraints
   * @param cvLabel a {@code String} parameter.
   * @return Parameter
  **/
  public Parameter cvLabel(String cvLabel) {
   this.cvLabel = cvLabel;
   return this;
  }

   /**
   * <p>Get cvLabel.</p>
   *
   * @return cvLabel
  **/
  @ApiModelProperty(value = "")
  public String getCvLabel() {
    return cvLabel;
  }

 /**
   * Set cvLabel.
   *
   * 
   * 
   * @see #getCvLabel Parameter#getCvLabel for validation constraints
   * @param cvLabel a {@code String} parameter.
  **/
  public void setCvLabel(String cvLabel) {
    this.cvLabel = cvLabel;
  }


 /**
   * Builder method for cvAccession.
   *
   * @see Parameter#setCvAccession Parameter#setCvAccession for specification examples
   * @see Parameter#getCvAccession Parameter#getCvAccession for validation constraints
   * @param cvAccession a {@code String} parameter.
   * @return Parameter
  **/
  public Parameter cvAccession(String cvAccession) {
   this.cvAccession = cvAccession;
   return this;
  }

   /**
   * <p>Get cvAccession.</p>
   *
   * @return cvAccession
  **/
  @ApiModelProperty(value = "")
  public String getCvAccession() {
    return cvAccession;
  }

 /**
   * Set cvAccession.
   *
   * 
   * 
   * @see #getCvAccession Parameter#getCvAccession for validation constraints
   * @param cvAccession a {@code String} parameter.
  **/
  public void setCvAccession(String cvAccession) {
    this.cvAccession = cvAccession;
  }


 /**
   * Builder method for name.
   *
   * @see Parameter#setName Parameter#setName for specification examples
   * @see Parameter#getName Parameter#getName for validation constraints
   * @param name a {@code String} parameter.
   * @return Parameter
  **/
  public Parameter name(String name) {
   this.name = name;
   return this;
  }

   /**
   * <p>Get name.</p>
   *
   * @return name
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

 /**
   * Set name.
   *
   * 
   * 
   * @see #getName Parameter#getName for validation constraints
   * @param name a {@code String} parameter.
  **/
  public void setName(String name) {
    this.name = name;
  }


 /**
   * Builder method for value.
   *
   * @see Parameter#setValue Parameter#setValue for specification examples
   * @see Parameter#getValue Parameter#getValue for validation constraints
   * @param value a {@code String} parameter.
   * @return Parameter
  **/
  public Parameter value(String value) {
   this.value = value;
   return this;
  }

   /**
   * <p>Get value.</p>
   *
   * @return value
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getValue() {
    return value;
  }

 /**
   * Set value.
   *
   * 
   * 
   * @see #getValue Parameter#getValue for validation constraints
   * @param value a {@code String} parameter.
  **/
  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameter parameter = (Parameter) o;
    return Objects.equals(this.cvLabel, parameter.cvLabel) &&
        Objects.equals(this.cvAccession, parameter.cvAccession) &&
        Objects.equals(this.name, parameter.name) &&
        Objects.equals(this.value, parameter.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cvLabel, cvAccession, name, value, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cvLabel: ").append(toIndentedString(cvLabel)).append("\n");
    sb.append("    cvAccession: ").append(toIndentedString(cvAccession)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

