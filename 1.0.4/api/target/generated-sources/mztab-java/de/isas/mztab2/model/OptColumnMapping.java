/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * Additional columns can be added to the end of the small molecule table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>SMH	SML_ID	…	opt_assay[1]_my_value	…	opt_global_another_value
SML	1	…	My value	…	some other value
</code></pre>
 * 
 *
 */
@ApiModel(description = "Additional columns can be added to the end of the small molecule table. These column headers MUST start with the prefix “opt_” followed by the {identifier} of the object they reference: assay, study variable, MS run or “global” (if the value relates to all replicates). Column names MUST only contain the following characters: ‘A’-‘Z’, ‘a’-‘z’, ‘0’-‘9’, ‘’, ‘-’, ‘[’, ‘]’, and ‘:’. CV parameter accessions MAY be used for optional columns following the format: opt{identifier}_cv_{accession}_\\{parameter name}. Spaces within the parameter’s name MUST be replaced by ‘_’. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "OptColumnMapping")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "OptColumnMapping")
public class OptColumnMapping {

  /**
   * Property enumeration for OptColumnMapping.
   */
  public static enum Properties {
      identifier("identifier"), 
      param("param"), 
      value("value");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("identifier")
  @JacksonXmlProperty(localName = "identifier")
  @XmlElement(name = "identifier")
  private String identifier = null;
  @JsonProperty("param")
  @JacksonXmlProperty(localName = "param")
  @XmlElement(name = "param")
  private Parameter param = null;
  @JsonProperty("value")
  @JacksonXmlProperty(localName = "value")
  @XmlElement(name = "value")
  private String value = null;

 /**
   * Builder method for identifier.
   *
   * @see OptColumnMapping#setIdentifier OptColumnMapping#setIdentifier for specification examples
   * @see OptColumnMapping#getIdentifier OptColumnMapping#getIdentifier for validation constraints
   * @param identifier a {@code String} parameter.
   * @return OptColumnMapping
  **/
  public OptColumnMapping identifier(String identifier) {
   this.identifier = identifier;
   return this;
  }

   /**
   * The fully qualified column name.
   *
   * @return identifier
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The fully qualified column name.")
  public String getIdentifier() {
    return identifier;
  }

 /**
   * Set identifier.
   *
   * 
   * 
   * @see #getIdentifier OptColumnMapping#getIdentifier for validation constraints
   * @param identifier a {@code String} parameter.
  **/
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


 /**
   * Builder method for param.
   *
   * @see OptColumnMapping#setParam OptColumnMapping#setParam for specification examples
   * @see OptColumnMapping#getParam OptColumnMapping#getParam for validation constraints
   * @param param a {@code Parameter} parameter.
   * @return OptColumnMapping
  **/
  public OptColumnMapping param(Parameter param) {
   this.param = param;
   return this;
  }

   /**
   * The (optional) parameter for this column.
   *
   * @return param
  **/
  @Valid
  @ApiModelProperty(value = "The (optional) parameter for this column.")
  public Parameter getParam() {
    return param;
  }

 /**
   * Set param.
   *
   * 
   * 
   * @see #getParam OptColumnMapping#getParam for validation constraints
   * @param param a {@code Parameter} parameter.
  **/
  public void setParam(Parameter param) {
    this.param = param;
  }


 /**
   * Builder method for value.
   *
   * @see OptColumnMapping#setValue OptColumnMapping#setValue for specification examples
   * @see OptColumnMapping#getValue OptColumnMapping#getValue for validation constraints
   * @param value a {@code String} parameter.
   * @return OptColumnMapping
  **/
  public OptColumnMapping value(String value) {
   this.value = value;
   return this;
  }

   /**
   * The value for this column in a particular row.
   *
   * @return value
  **/
  @ApiModelProperty(value = "The value for this column in a particular row.")
  public String getValue() {
    return value;
  }

 /**
   * Set value.
   *
   * 
   * 
   * @see #getValue OptColumnMapping#getValue for validation constraints
   * @param value a {@code String} parameter.
  **/
  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptColumnMapping optColumnMapping = (OptColumnMapping) o;
    return Objects.equals(this.identifier, optColumnMapping.identifier) &&
        Objects.equals(this.param, optColumnMapping.param) &&
        Objects.equals(this.value, optColumnMapping.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, param, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptColumnMapping {\n");
    
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

