/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].
 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	instrument[1]-name	[MS, MS:1000449, LTQ Orbitrap,]
MTD	instrument[1]-source	[MS, MS:1000073, ESI,]
…
MTD	instrument[2]-source	[MS, MS:1000598, ETD,]
MTD	instrument[1]-analyzer[1]	[MS, MS:1000291, linear ion trap,]
…
MTD	instrument[2]-analyzer[1]	[MS, MS:1000484, orbitrap,]
MTD	instrument[1]-detector	[MS, MS:1000253, electron multiplier,]
…
MTD	instrument[2]-detector	[MS, MS:1000348, focal plane collector,]
</code></pre>
 * 
 *
 */
@ApiModel(description = "The name, source, analyzer and detector of the instruments used in the experiment. Multiple instruments are numbered [1-n].")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Instrument")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Instrument")
public class Instrument extends IndexedElement {

  /**
   * Property enumeration for Instrument.
   */
  public static enum Properties {
      name("name"), 
      source("source"), 
      analyzer("analyzer"), 
      detector("detector");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private Parameter name = null;
  @JsonProperty("source")
  @JacksonXmlProperty(localName = "source")
  @XmlElement(name = "source")
  private Parameter source = null;
  @JsonProperty("analyzer")
  // Is a container wrapped=false
  // items.name=analyzer items.baseName=analyzer items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "analyzer")
  private List<Parameter> analyzer = null;
  @JsonProperty("detector")
  @JacksonXmlProperty(localName = "detector")
  @XmlElement(name = "detector")
  private Parameter detector = null;
  
  @Override
  public Instrument id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Instrument elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for name.
   *
   * @see Instrument#setName Instrument#setName for specification examples
   * @see Instrument#getName Instrument#getName for validation constraints
   * @param name a {@code Parameter} parameter.
   * @return Instrument
  **/
  public Instrument name(Parameter name) {
   this.name = name;
   return this;
  }

   /**
   * <p>Get name.</p>
   *
   * @return name
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getName() {
    return name;
  }

 /**
   * Set name.
   *
   * 
   * 
   * @see #getName Instrument#getName for validation constraints
   * @param name a {@code Parameter} parameter.
  **/
  public void setName(Parameter name) {
    this.name = name;
  }


 /**
   * Builder method for source.
   *
   * @see Instrument#setSource Instrument#setSource for specification examples
   * @see Instrument#getSource Instrument#getSource for validation constraints
   * @param source a {@code Parameter} parameter.
   * @return Instrument
  **/
  public Instrument source(Parameter source) {
   this.source = source;
   return this;
  }

   /**
   * The instrument&#39;s source, as defined by the parameter.
   *
   * @return source
  **/
  @Valid
  @ApiModelProperty(value = "The instrument's source, as defined by the parameter.")
  public Parameter getSource() {
    return source;
  }

 /**
   * Set source.
   *
   * 
   * 
   * @see #getSource Instrument#getSource for validation constraints
   * @param source a {@code Parameter} parameter.
  **/
  public void setSource(Parameter source) {
    this.source = source;
  }


 /**
   * Builder method for analyzer.
   *
   * @see Instrument#setAnalyzer Instrument#setAnalyzer for specification examples
   * @see Instrument#getAnalyzer Instrument#getAnalyzer for validation constraints
   * @param analyzer a {@code List<Parameter>} parameter.
   * @return Instrument
  **/
  public Instrument analyzer(List<Parameter> analyzer) {
   this.analyzer = analyzer;
   return this;
  }

  /**
   * Add a single analyzerItem to the analyzer collection.
   *
   * @see Instrument#getAnalyzer Instrument#getAnalyzer for validation constraints
   * @param analyzerItem a {@code Parameter} parameter.
   * @return Instrument
   */
  public Instrument addAnalyzerItem(Parameter analyzerItem) {
    if (this.analyzer == null) {
      this.analyzer = new ArrayList<>();
    }
    this.analyzer.add(analyzerItem);
    return this;
  }

   /**
   * The instrument&#39;s mass analyzer, as defined by the parameter.
   *
   * @return analyzer
  **/
  @Valid
  @ApiModelProperty(value = "The instrument's mass analyzer, as defined by the parameter.")
  public List<Parameter> getAnalyzer() {
    return analyzer;
  }

 /**
   * Set analyzer.
   *
   * 
   * 
   * @see #getAnalyzer Instrument#getAnalyzer for validation constraints
   * @param analyzer a {@code List<Parameter>} parameter.
  **/
  public void setAnalyzer(List<Parameter> analyzer) {
    this.analyzer = analyzer;
  }


 /**
   * Builder method for detector.
   *
   * @see Instrument#setDetector Instrument#setDetector for specification examples
   * @see Instrument#getDetector Instrument#getDetector for validation constraints
   * @param detector a {@code Parameter} parameter.
   * @return Instrument
  **/
  public Instrument detector(Parameter detector) {
   this.detector = detector;
   return this;
  }

   /**
   * The instrument&#39;s detector, as defined by the parameter.
   *
   * @return detector
  **/
  @Valid
  @ApiModelProperty(value = "The instrument's detector, as defined by the parameter.")
  public Parameter getDetector() {
    return detector;
  }

 /**
   * Set detector.
   *
   * 
   * 
   * @see #getDetector Instrument#getDetector for validation constraints
   * @param detector a {@code Parameter} parameter.
  **/
  public void setDetector(Parameter detector) {
    this.detector = detector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instrument instrument = (Instrument) o;
    return Objects.equals(this.name, instrument.name) &&
        Objects.equals(this.source, instrument.source) &&
        Objects.equals(this.analyzer, instrument.analyzer) &&
        Objects.equals(this.detector, instrument.detector) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, source, analyzer, detector, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instrument {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    analyzer: ").append(toIndentedString(analyzer)).append("\n");
    sb.append("    detector: ").append(toIndentedString(detector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

