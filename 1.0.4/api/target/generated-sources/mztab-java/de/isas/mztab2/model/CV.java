/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * Specification of controlled vocabularies.
label: A string describing the labels of the controlled vocabularies/ontologies used in the mzTab file as a short-hand e.g. "MS" for PSI-MS.
full_name: A string describing the full names of the controlled vocabularies/ontologies used in the mzTab file.
version: A string describing the version of the controlled vocabularies/ontologies used in the mzTab file.
uri: A string containing the URIs of the controlled vocabularies/ontologies used in the mzTab file.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	cv[1]-label	MS
MTD	cv[1]-full_name	PSI-MS controlled vocabulary
MTD	cv[1]-version	4.1.11
MTD	cv[1]-uri	https://raw.githubusercontent.com/HUPO-PSI/psi-ms-CV/master/psi-ms.obo
</code></pre>
 * 
 *
 */
@ApiModel(description = "Specification of controlled vocabularies. label: A string describing the labels of the controlled vocabularies/ontologies used in the mzTab file as a short-hand e.g. \"MS\" for PSI-MS. full_name: A string describing the full names of the controlled vocabularies/ontologies used in the mzTab file. version: A string describing the version of the controlled vocabularies/ontologies used in the mzTab file. uri: A string containing the URIs of the controlled vocabularies/ontologies used in the mzTab file. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "CV")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "CV")
public class CV extends IndexedElement {

  /**
   * Property enumeration for CV.
   */
  public static enum Properties {
      label("label"), 
      fullName("full_name"), 
      version("version"), 
      uri("uri");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("label")
  @JacksonXmlProperty(localName = "label")
  @XmlElement(name = "label")
  private String label = null;
  @JsonProperty("full_name")
  @JacksonXmlProperty(localName = "full_name")
  @XmlElement(name = "full_name")
  private String fullName = null;
  @JsonProperty("version")
  @JacksonXmlProperty(localName = "version")
  @XmlElement(name = "version")
  private String version = null;
  @JsonProperty("uri")
  @JacksonXmlProperty(localName = "uri")
  @XmlElement(name = "uri")
  private String uri = null;
  
  @Override
  public CV id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public CV elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for label.
   *
   * @see CV#setLabel CV#setLabel for specification examples
   * @see CV#getLabel CV#getLabel for validation constraints
   * @param label a {@code String} parameter.
   * @return CV
  **/
  public CV label(String label) {
   this.label = label;
   return this;
  }

   /**
   * The abbreviated CV label.
   *
   * @return label
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The abbreviated CV label.")
  public String getLabel() {
    return label;
  }

 /**
   * Set label.
   *
   * 
   * 
   * @see #getLabel CV#getLabel for validation constraints
   * @param label a {@code String} parameter.
  **/
  public void setLabel(String label) {
    this.label = label;
  }


 /**
   * Builder method for fullName.
   *
   * @see CV#setFullName CV#setFullName for specification examples
   * @see CV#getFullName CV#getFullName for validation constraints
   * @param fullName a {@code String} parameter.
   * @return CV
  **/
  public CV fullName(String fullName) {
   this.fullName = fullName;
   return this;
  }

   /**
   * The full name of this CV, for humans.
   *
   * @return fullName
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The full name of this CV, for humans.")
  public String getFullName() {
    return fullName;
  }

 /**
   * Set fullName.
   *
   * 
   * 
   * @see #getFullName CV#getFullName for validation constraints
   * @param fullName a {@code String} parameter.
  **/
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


 /**
   * Builder method for version.
   *
   * @see CV#setVersion CV#setVersion for specification examples
   * @see CV#getVersion CV#getVersion for validation constraints
   * @param version a {@code String} parameter.
   * @return CV
  **/
  public CV version(String version) {
   this.version = version;
   return this;
  }

   /**
   * The CV version used when the file was generated.
   *
   * @return version
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The CV version used when the file was generated.")
  public String getVersion() {
    return version;
  }

 /**
   * Set version.
   *
   * 
   * 
   * @see #getVersion CV#getVersion for validation constraints
   * @param version a {@code String} parameter.
  **/
  public void setVersion(String version) {
    this.version = version;
  }


 /**
   * Builder method for uri.
   *
   * @see CV#setUri CV#setUri for specification examples
   * @see CV#getUri CV#getUri for validation constraints
   * @param uri a {@code String} parameter.
   * @return CV
  **/
  public CV uri(String uri) {
   this.uri = uri;
   return this;
  }

   /**
   * A URI to the CV definition.
   *
   * @return uri
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "A URI to the CV definition.")
  public String getUri() {
    return uri;
  }

 /**
   * Set uri.
   *
   * 
   * 
   * @see #getUri CV#getUri for validation constraints
   * @param uri a {@code String} parameter.
  **/
  public void setUri(String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CV CV = (CV) o;
    return Objects.equals(this.label, CV.label) &&
        Objects.equals(this.fullName, CV.fullName) &&
        Objects.equals(this.version, CV.version) &&
        Objects.equals(this.uri, CV.uri) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, fullName, version, uri, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CV {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

