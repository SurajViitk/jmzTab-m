/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * A list of parameters describing a sample processing, preparation or handling step similar to a biological or analytical methods report. The order of the sample_processing items should reflect the order these processing steps were performed in. If multiple parameters are given for a step these MUST be separated by a “|”. If derivatization was performed, it MUST be reported here as a general step, e.g. 'silylation' and the actual derivatization agens MUST be specified in the Section 6.2.54 part.      

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	sample_processing[1]	[MSIO, MSIO:0000107, metabolism quenching using precooled 60 percent methanol ammonium bicarbonate buffer,]
MTD	sample_processing[2]	[MSIO, MSIO:0000146, centrifugation,]
MTD	sample_processing[3]	[MSIO, MSIO:0000141, metabolite extraction,]
MTD	sample_processing[4]	[MSIO, MSIO:0000141, silylation,]
</code></pre>
 * 
 *
 */
@ApiModel(description = "A list of parameters describing a sample processing, preparation or handling step similar to a biological or analytical methods report. The order of the sample_processing items should reflect the order these processing steps were performed in. If multiple parameters are given for a step these MUST be separated by a “|”. If derivatization was performed, it MUST be reported here as a general step, e.g. 'silylation' and the actual derivatization agens MUST be specified in the Section 6.2.54 part.       ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "SampleProcessing")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "SampleProcessing")
public class SampleProcessing extends IndexedElement {

  /**
   * Property enumeration for SampleProcessing.
   */
  public static enum Properties {
      sampleProcessing("sampleProcessing");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("sampleProcessing")
  // Is a container wrapped=false
  // items.name=sampleProcessing items.baseName=sampleProcessing items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "sampleProcessing")
  private List<Parameter> sampleProcessing = null;
  
  @Override
  public SampleProcessing id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public SampleProcessing elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for sampleProcessing.
   *
   * @see SampleProcessing#setSampleProcessing SampleProcessing#setSampleProcessing for specification examples
   * @see SampleProcessing#getSampleProcessing SampleProcessing#getSampleProcessing for validation constraints
   * @param sampleProcessing a {@code List<Parameter>} parameter.
   * @return SampleProcessing
  **/
  public SampleProcessing sampleProcessing(List<Parameter> sampleProcessing) {
   this.sampleProcessing = sampleProcessing;
   return this;
  }

  /**
   * Add a single sampleProcessingItem to the sampleProcessing collection.
   *
   * @see SampleProcessing#getSampleProcessing SampleProcessing#getSampleProcessing for validation constraints
   * @param sampleProcessingItem a {@code Parameter} parameter.
   * @return SampleProcessing
   */
  public SampleProcessing addSampleProcessingItem(Parameter sampleProcessingItem) {
    if (this.sampleProcessing == null) {
      this.sampleProcessing = new ArrayList<>();
    }
    this.sampleProcessing.add(sampleProcessingItem);
    return this;
  }

   /**
   * Parameters specifiying sample processing that was applied within one step.
   *
   * @return sampleProcessing
  **/
  @Valid
  @ApiModelProperty(value = "Parameters specifiying sample processing that was applied within one step.")
  public List<Parameter> getSampleProcessing() {
    return sampleProcessing;
  }

 /**
   * Set sampleProcessing.
   *
   * 
   * 
   * @see #getSampleProcessing SampleProcessing#getSampleProcessing for validation constraints
   * @param sampleProcessing a {@code List<Parameter>} parameter.
  **/
  public void setSampleProcessing(List<Parameter> sampleProcessing) {
    this.sampleProcessing = sampleProcessing;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampleProcessing sampleProcessing = (SampleProcessing) o;
    return Objects.equals(this.sampleProcessing, sampleProcessing.sampleProcessing) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sampleProcessing, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampleProcessing {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sampleProcessing: ").append(toIndentedString(sampleProcessing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

