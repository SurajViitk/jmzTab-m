/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.Instrument;
import de.isas.mztab2.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * Specification of ms_run. 
location: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a “null” MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay. 
instrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run. 
format: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1. 
id_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present.
fragmentation_method: The type(s) of fragmentation used in a given ms run.
scan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs.
hash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.
hash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>COM	location can be a local or remote URI
MTD	ms_run[1]-location	file:///C:/path/to/my/file.mzML
MTD	ms_run[1]-instrument_ref	instrument[1]
MTD	ms_run[1]-format	[MS, MS:1000584, mzML file, ]
MTD	ms_run[1]-id_format	[MS, MS:1000530, mzML unique identifier, ]
MTD	ms_run[1]-fragmentation_method[1]	[MS, MS:1000133, CID, ]
COM	for mixed polarity scan scenarios
MTD	ms_run[1]-scan_polarity[1]	[MS, MS:1000130, positive scan, ]
MTD	ms_run[1]-scan_polarity[2]	[MS, MS:1000129, negative scan, ]
MTD	ms_run[1]-hash_method	[MS, MS:1000569, SHA-1, ]
MTD	ms_run[1]-hash	de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3
</code></pre>
 * 
 *
 */
@ApiModel(description = "Specification of ms_run.  location: Location of the external data file e.g. raw files on which analysis has been performed. If the actual location of the MS run is unknown, a “null” MUST be used as a place holder value, since the [1-n] cardinality is referenced elsewhere. If pre-fractionation has been performed, then [1-n] ms_runs SHOULD be created per assay.  instrument_ref: If different instruments are used in different runs, instrument_ref can be used to link a specific instrument to a specific run.  format: Parameter specifying the data format of the external MS data file. If ms_run[1-n]-format is present, ms_run[1-n]-id_format SHOULD also be present, following the parameters specified in Table 1.  id_format: Parameter specifying the id format used in the external data file. If ms_run[1-n]-id_format is present, ms_run[1-n]-format SHOULD also be present. fragmentation_method: The type(s) of fragmentation used in a given ms run. scan_polarity: The polarity mode of a given run. Usually only one value SHOULD be given here except for the case of mixed polarity runs. hash: Hash value of the corresponding external MS data file defined in ms_run[1-n]-location. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present. hash_method: A parameter specifying the hash methods used to generate the String in ms_run[1-n]-hash. Specifics of the hash method used MAY follow the definitions of the mzML format. If ms_run[1-n]-hash is present, ms_run[1-n]-hash_method SHOULD also be present. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "MsRun")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "MsRun")
public class MsRun extends IndexedElement {

  /**
   * Property enumeration for MsRun.
   */
  public static enum Properties {
      name("name"), 
      location("location"), 
      instrumentRef("instrument_ref"), 
      format("format"), 
      idFormat("id_format"), 
      fragmentationMethod("fragmentation_method"), 
      scanPolarity("scan_polarity"), 
      hash("hash"), 
      hashMethod("hash_method");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private String name = null;
  @JsonProperty("location")
  @JacksonXmlProperty(localName = "location")
  @XmlElement(name = "location")
  private String location = null;
  @JsonProperty("instrument_ref")
  @JacksonXmlProperty(localName = "instrument_ref")
  @XmlElement(name = "instrument_ref")
  private Instrument instrumentRef = null;
  @JsonProperty("format")
  @JacksonXmlProperty(localName = "format")
  @XmlElement(name = "format")
  private Parameter format = null;
  @JsonProperty("id_format")
  @JacksonXmlProperty(localName = "id_format")
  @XmlElement(name = "id_format")
  private Parameter idFormat = null;
  @JsonProperty("fragmentation_method")
  // Is a container wrapped=false
  // items.name=fragmentationMethod items.baseName=fragmentationMethod items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "fragmentationMethod")
  private List<Parameter> fragmentationMethod = null;
  @JsonProperty("scan_polarity")
  // Is a container wrapped=false
  // items.name=scanPolarity items.baseName=scanPolarity items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "scanPolarity")
  private List<Parameter> scanPolarity = null;
  @JsonProperty("hash")
  @JacksonXmlProperty(localName = "hash")
  @XmlElement(name = "hash")
  private String hash = null;
  @JsonProperty("hash_method")
  @JacksonXmlProperty(localName = "hash_method")
  @XmlElement(name = "hash_method")
  private Parameter hashMethod = null;
  
  @Override
  public MsRun id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public MsRun elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for name.
   *
   * @see MsRun#setName MsRun#setName for specification examples
   * @see MsRun#getName MsRun#getName for validation constraints
   * @param name a {@code String} parameter.
   * @return MsRun
  **/
  public MsRun name(String name) {
   this.name = name;
   return this;
  }

   /**
   * The msRun&#39;s name.
   *
   * @return name
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The msRun's name.")
  public String getName() {
    return name;
  }

 /**
   * Set name.
   *
   * 
   * 
   * @see #getName MsRun#getName for validation constraints
   * @param name a {@code String} parameter.
  **/
  public void setName(String name) {
    this.name = name;
  }


 /**
   * Builder method for location.
   *
   * @see MsRun#setLocation MsRun#setLocation for specification examples
   * @see MsRun#getLocation MsRun#getLocation for validation constraints
   * @param location a {@code String} parameter.
   * @return MsRun
  **/
  public MsRun location(String location) {
   this.location = location;
   return this;
  }

   /**
   * The msRun&#39;s location URI.
   *
   * @return location
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The msRun's location URI.")
  public String getLocation() {
    return location;
  }

 /**
   * Set location.
   *
   * 
   * 
   * @see #getLocation MsRun#getLocation for validation constraints
   * @param location a {@code String} parameter.
  **/
  public void setLocation(String location) {
    this.location = location;
  }


 /**
   * Builder method for instrumentRef.
   *
   * @see MsRun#setInstrumentRef MsRun#setInstrumentRef for specification examples
   * @see MsRun#getInstrumentRef MsRun#getInstrumentRef for validation constraints
   * @param instrumentRef a {@code Instrument} parameter.
   * @return MsRun
  **/
  public MsRun instrumentRef(Instrument instrumentRef) {
   this.instrumentRef = instrumentRef;
   return this;
  }

   /**
   * The instrument on which this msRun was measured.
   *
   * @return instrumentRef
  **/
  @Valid
  @ApiModelProperty(value = "The instrument on which this msRun was measured.")
  public Instrument getInstrumentRef() {
    return instrumentRef;
  }

 /**
   * Set instrumentRef.
   *
   * 
   * 
   * @see #getInstrumentRef MsRun#getInstrumentRef for validation constraints
   * @param instrumentRef a {@code Instrument} parameter.
  **/
  public void setInstrumentRef(Instrument instrumentRef) {
    this.instrumentRef = instrumentRef;
  }


 /**
   * Builder method for format.
   *
   * @see MsRun#setFormat MsRun#setFormat for specification examples
   * @see MsRun#getFormat MsRun#getFormat for validation constraints
   * @param format a {@code Parameter} parameter.
   * @return MsRun
  **/
  public MsRun format(Parameter format) {
   this.format = format;
   return this;
  }

   /**
   * The msRun&#39;s file format.
   *
   * @return format
  **/
  @Valid
  @ApiModelProperty(value = "The msRun's file format.")
  public Parameter getFormat() {
    return format;
  }

 /**
   * Set format.
   *
   * 
   * 
   * @see #getFormat MsRun#getFormat for validation constraints
   * @param format a {@code Parameter} parameter.
  **/
  public void setFormat(Parameter format) {
    this.format = format;
  }


 /**
   * Builder method for idFormat.
   *
   * @see MsRun#setIdFormat MsRun#setIdFormat for specification examples
   * @see MsRun#getIdFormat MsRun#getIdFormat for validation constraints
   * @param idFormat a {@code Parameter} parameter.
   * @return MsRun
  **/
  public MsRun idFormat(Parameter idFormat) {
   this.idFormat = idFormat;
   return this;
  }

   /**
   * The msRun&#39;s mass spectra id format.
   *
   * @return idFormat
  **/
  @Valid
  @ApiModelProperty(value = "The msRun's mass spectra id format.")
  public Parameter getIdFormat() {
    return idFormat;
  }

 /**
   * Set idFormat.
   *
   * 
   * 
   * @see #getIdFormat MsRun#getIdFormat for validation constraints
   * @param idFormat a {@code Parameter} parameter.
  **/
  public void setIdFormat(Parameter idFormat) {
    this.idFormat = idFormat;
  }


 /**
   * Builder method for fragmentationMethod.
   *
   * @see MsRun#setFragmentationMethod MsRun#setFragmentationMethod for specification examples
   * @see MsRun#getFragmentationMethod MsRun#getFragmentationMethod for validation constraints
   * @param fragmentationMethod a {@code List<Parameter>} parameter.
   * @return MsRun
  **/
  public MsRun fragmentationMethod(List<Parameter> fragmentationMethod) {
   this.fragmentationMethod = fragmentationMethod;
   return this;
  }

  /**
   * Add a single fragmentationMethodItem to the fragmentationMethod collection.
   *
   * @see MsRun#getFragmentationMethod MsRun#getFragmentationMethod for validation constraints
   * @param fragmentationMethodItem a {@code Parameter} parameter.
   * @return MsRun
   */
  public MsRun addFragmentationMethodItem(Parameter fragmentationMethodItem) {
    if (this.fragmentationMethod == null) {
      this.fragmentationMethod = new ArrayList<>();
    }
    this.fragmentationMethod.add(fragmentationMethodItem);
    return this;
  }

   /**
   * The fragmentation methods applied during this msRun.
   *
   * @return fragmentationMethod
  **/
  @Valid
  @ApiModelProperty(value = "The fragmentation methods applied during this msRun.")
  public List<Parameter> getFragmentationMethod() {
    return fragmentationMethod;
  }

 /**
   * Set fragmentationMethod.
   *
   * 
   * 
   * @see #getFragmentationMethod MsRun#getFragmentationMethod for validation constraints
   * @param fragmentationMethod a {@code List<Parameter>} parameter.
  **/
  public void setFragmentationMethod(List<Parameter> fragmentationMethod) {
    this.fragmentationMethod = fragmentationMethod;
  }


 /**
   * Builder method for scanPolarity.
   *
   * @see MsRun#setScanPolarity MsRun#setScanPolarity for specification examples
   * @see MsRun#getScanPolarity MsRun#getScanPolarity for validation constraints
   * @param scanPolarity a {@code List<Parameter>} parameter.
   * @return MsRun
  **/
  public MsRun scanPolarity(List<Parameter> scanPolarity) {
   this.scanPolarity = scanPolarity;
   return this;
  }

  /**
   * Add a single scanPolarityItem to the scanPolarity collection.
   *
   * @see MsRun#getScanPolarity MsRun#getScanPolarity for validation constraints
   * @param scanPolarityItem a {@code Parameter} parameter.
   * @return MsRun
   */
  public MsRun addScanPolarityItem(Parameter scanPolarityItem) {
    if (this.scanPolarity == null) {
      this.scanPolarity = new ArrayList<>();
    }
    this.scanPolarity.add(scanPolarityItem);
    return this;
  }

   /**
   * The scan polarity/polarities used during this msRun.
   *
   * @return scanPolarity
  **/
  @Valid
  @ApiModelProperty(value = "The scan polarity/polarities used during this msRun.")
  public List<Parameter> getScanPolarity() {
    return scanPolarity;
  }

 /**
   * Set scanPolarity.
   *
   * 
   * 
   * @see #getScanPolarity MsRun#getScanPolarity for validation constraints
   * @param scanPolarity a {@code List<Parameter>} parameter.
  **/
  public void setScanPolarity(List<Parameter> scanPolarity) {
    this.scanPolarity = scanPolarity;
  }


 /**
   * Builder method for hash.
   *
   * @see MsRun#setHash MsRun#setHash for specification examples
   * @see MsRun#getHash MsRun#getHash for validation constraints
   * @param hash a {@code String} parameter.
   * @return MsRun
  **/
  public MsRun hash(String hash) {
   this.hash = hash;
   return this;
  }

   /**
   * The file hash value of this msRun&#39;s data file.
   *
   * @return hash
  **/
  @ApiModelProperty(value = "The file hash value of this msRun's data file.")
  public String getHash() {
    return hash;
  }

 /**
   * Set hash.
   *
   * 
   * 
   * @see #getHash MsRun#getHash for validation constraints
   * @param hash a {@code String} parameter.
  **/
  public void setHash(String hash) {
    this.hash = hash;
  }


 /**
   * Builder method for hashMethod.
   *
   * @see MsRun#setHashMethod MsRun#setHashMethod for specification examples
   * @see MsRun#getHashMethod MsRun#getHashMethod for validation constraints
   * @param hashMethod a {@code Parameter} parameter.
   * @return MsRun
  **/
  public MsRun hashMethod(Parameter hashMethod) {
   this.hashMethod = hashMethod;
   return this;
  }

   /**
   * The hash method used to calculate the file hash.
   *
   * @return hashMethod
  **/
  @Valid
  @ApiModelProperty(value = "The hash method used to calculate the file hash.")
  public Parameter getHashMethod() {
    return hashMethod;
  }

 /**
   * Set hashMethod.
   *
   * 
   * 
   * @see #getHashMethod MsRun#getHashMethod for validation constraints
   * @param hashMethod a {@code Parameter} parameter.
  **/
  public void setHashMethod(Parameter hashMethod) {
    this.hashMethod = hashMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MsRun msRun = (MsRun) o;
    return Objects.equals(this.name, msRun.name) &&
        Objects.equals(this.location, msRun.location) &&
        Objects.equals(this.instrumentRef, msRun.instrumentRef) &&
        Objects.equals(this.format, msRun.format) &&
        Objects.equals(this.idFormat, msRun.idFormat) &&
        Objects.equals(this.fragmentationMethod, msRun.fragmentationMethod) &&
        Objects.equals(this.scanPolarity, msRun.scanPolarity) &&
        Objects.equals(this.hash, msRun.hash) &&
        Objects.equals(this.hashMethod, msRun.hashMethod) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, location, instrumentRef, format, idFormat, fragmentationMethod, scanPolarity, hash, hashMethod, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MsRun {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    instrumentRef: ").append(toIndentedString(instrumentRef)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    idFormat: ").append(toIndentedString(idFormat)).append("\n");
    sb.append("    fragmentationMethod: ").append(toIndentedString(fragmentationMethod)).append("\n");
    sb.append("    scanPolarity: ").append(toIndentedString(scanPolarity)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    hashMethod: ").append(toIndentedString(hashMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

