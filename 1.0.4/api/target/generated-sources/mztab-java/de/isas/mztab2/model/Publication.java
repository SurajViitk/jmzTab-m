/*
 * mzTab-M reference implementation and validation API.
 * This is the mzTab-M reference implementation and validation API service.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab2.model.IndexedElement;
import de.isas.mztab2.model.PublicationItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.mztab2.validation.constraints.*;
/**
 * 
 * A publication associated with this file. Several publications can be given by indicating the number in the square brackets after “publication”. PubMed ids must be prefixed by “pubmed:”, DOIs by “doi:”. Multiple identifiers MUST be separated by “|”.

 * 
 *
 * <p>mzTab-M specification example(s):</p>
 * <pre><code>MTD	publication[1]	pubmed:21063943|doi:10.1007/978-1-60761-987-1_6
MTD	publication[2]	pubmed:20615486|doi:10.1016/j.jprot.2010.06.008
</code></pre>
 * 
 *
 */
@ApiModel(description = "A publication associated with this file. Several publications can be given by indicating the number in the square brackets after “publication”. PubMed ids must be prefixed by “pubmed:”, DOIs by “doi:”. Multiple identifiers MUST be separated by “|”. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-11T15:12:05.057+01:00")
@XmlRootElement(name = "Publication")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Publication")
public class Publication extends IndexedElement {

  /**
   * Property enumeration for Publication.
   */
  public static enum Properties {
      publicationItems("publicationItems");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("publicationItems")
  // Is a container wrapped=false
  // items.name=publicationItems items.baseName=publicationItems items.xmlName= items.xmlNamespace=
  // items.example= items.type=PublicationItem
  @XmlElement(name = "publicationItems")
  private List<PublicationItem> publicationItems = new ArrayList<>();
  
  @Override
  public Publication id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Publication elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

 /**
   * Builder method for publicationItems.
   *
   * @see Publication#setPublicationItems Publication#setPublicationItems for specification examples
   * @see Publication#getPublicationItems Publication#getPublicationItems for validation constraints
   * @param publicationItems a {@code List<PublicationItem>} parameter.
   * @return Publication
  **/
  public Publication publicationItems(List<PublicationItem> publicationItems) {
   this.publicationItems = publicationItems;
   return this;
  }

  /**
   * Add a single publicationItemsItem to the publicationItems collection.
   *
   * @see Publication#getPublicationItems Publication#getPublicationItems for validation constraints
   * @param publicationItemsItem a {@code PublicationItem} parameter.
   * @return Publication
   */
  public Publication addPublicationItemsItem(PublicationItem publicationItemsItem) {
    this.publicationItems.add(publicationItemsItem);
    return this;
  }

   /**
   * The publication item ids referenced by this publication.
   *
   * @return publicationItems
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The publication item ids referenced by this publication.")
  public List<PublicationItem> getPublicationItems() {
    return publicationItems;
  }

 /**
   * Set publicationItems.
   *
   * 
   * 
   * @see #getPublicationItems Publication#getPublicationItems for validation constraints
   * @param publicationItems a {@code List<PublicationItem>} parameter.
  **/
  public void setPublicationItems(List<PublicationItem> publicationItems) {
    this.publicationItems = publicationItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Publication publication = (Publication) o;
    return Objects.equals(this.publicationItems, publication.publicationItems) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicationItems, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Publication {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    publicationItems: ").append(toIndentedString(publicationItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

