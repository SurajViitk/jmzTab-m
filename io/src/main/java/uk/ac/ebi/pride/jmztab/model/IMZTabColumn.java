/*
 * Copyright 2017 Nils Hoffmann <nils.hoffmann@isas.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.ac.ebi.pride.jmztab.model;

import de.isas.mztab1_1.model.IndexedElement;

/**
 *
 * @author Nils Hoffmann <nils.hoffmann@isas.de>
 * @since 1.1
 */
public interface IMZTabColumn {

    /**
     * Get the column data type Class.
     */
    Class<?> getDataType();

    /**
     * Indexed element used in optional column header and logical position
     * definition. In stable column, the return is null.
     *
     * Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.
     *
     * @see #getHeader()
     * @see #getLogicPosition()
     */
    IndexedElement getElement();

    /**
     * Get the column name. For stable column, name and header are same. While
     * for optional column, name is part of its header. For example, optional
     * column which header is search_engine_score_ms_run[1-n], and its name is
     * search_engine_score. Besides this, ms_run[1-n] is kind of
     * {@link #element}
     *
     * Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.
     *
     * @see #getName()
     * @see #setElement(IndexedElement)
     */
    String getHeader();

    /**
     * Get the column logical position. For stable column, order and logical
     * position are same. But for optional column, the logical position need to
     * calculate by concatenate order and index element id. For example,
     * optional column search_engine_score_ms_run[2] in Protein section, its
     * order is 09, and the logical position is 092. Because the element
     * ms_run[2] 's index is 2.
     *
     * </P>Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.</P>
     *
     * <P>
     * Notice: in {@link MZTabColumnFactory}, we use logical position to
     * maintain the logical consistence with in {@link MZTabFile}. During the
     * process of parsing mzTab file, we create a mapping between physical
     * position and internal logical position.</P>
     *
     * @see #getOrder()
     */
    String getLogicPosition();

    /**
     * Get the column name. For stable column, name and header are same. But for
     * optional column, name is part of its header. For example, optional column
     * which header is search_engine_score_ms_run[1-n], and its name is
     * search_engine_score. Besides this, ms_run[1-n] is kind of
     * {@link #element}
     *
     * Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.
     *
     * @see #getHeader()
     * @see #setElement(IndexedElement)
     */
    String getName();

    /**
     * Get the column internal order. For stable column, order and logical
     * position are same. But for optional column, the logical position need to
     * be calculated by concatenating order and index element id. For example,
     * optional column search_engine_score_ms_run[2] in Protein section, its
     * order is 09, and the logical position is 092. Because the element
     * ms_run[2] 's index is 2.
     *
     * Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.
     *
     * @see #getLogicPosition()
     */
    String getOrder();

    /**
     * Judge this column belong to stable column or optional column.
     */
    boolean isOptional();

    void setHeader(String header);

    void setLogicPosition(String logicPosition);

    /*
     * Allows to reassign the order in case the file doesn't follow the recommended order
     */
    void setOrder(String order);

    /**
     * Indexed element used in optional column header and logical position
     * definition. In stable column, the return is null.
     *
     * Notice: this design pattern not fit for
     * {@link AbundanceColumn}, {@link OptionColumn} and
     * {@link CVParamOptionColumn}. These optional columns need be generated by
     * calling {@link MZTabColumnFactory} 's methods.
     *
     * @see #getHeader()
     * @see #getLogicPosition()
     *
     * @param element SHOULD NOT set null.
     */
    void setElement(IndexedElement element);

}
